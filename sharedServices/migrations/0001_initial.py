# Generated by Django 3.2.11 on 2022-02-14 06:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import sharedServices.model_files.station_models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MFGUserEV",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                ("email", models.CharField(max_length=1000)),
                (
                    "password",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "first_name",
                    models.BinaryField(
                        blank=True, max_length="max", null=True
                    ),
                ),
                (
                    "last_name",
                    models.BinaryField(
                        blank=True, max_length="max", null=True
                    ),
                ),
                (
                    "username",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "post_code",
                    models.BinaryField(
                        blank=True, max_length="max", null=True
                    ),
                ),
                (
                    "country",
                    models.BinaryField(
                        blank=True, max_length="max", null=True
                    ),
                ),
                (
                    "key",
                    models.BinaryField(
                        blank=True, max_length="max", null=True
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("customer_id", models.CharField(max_length=1000, null=True)),
                (
                    "encrypted_email",
                    models.BinaryField(
                        blank=True, max_length="max", null=True
                    ),
                ),
            ],
            options={
                "db_table": "mfg_user_ev",
            },
        ),
        migrations.CreateModel(
            name="AdminAuthorization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "otp",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                (
                    "otp_type",
                    models.CharField(
                        blank=True, db_index=True, max_length=20, null=True
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        blank=True, db_index=True, max_length=1000, null=True
                    ),
                ),
                (
                    "token_secret",
                    models.CharField(
                        blank=True, db_index=True, max_length=100, null=True
                    ),
                ),
                (
                    "refresh_token",
                    models.CharField(
                        blank=True, db_index=True, max_length=1000, null=True
                    ),
                ),
                (
                    "token_expire_time",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
            ],
            options={
                "db_table": "admin_authorization",
            },
        ),
        migrations.CreateModel(
            name="AdminUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "phone",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "full_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "user_name",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="images"
                    ),
                ),
                (
                    "first_time_login",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="Yes",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
            options={
                "db_table": "admin_user",
            },
        ),
        migrations.CreateModel(
            name="AuditTrail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_id", models.IntegerField()),
                (
                    "action",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                (
                    "module",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                (
                    "data_id",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                ("new_data", models.TextField(blank=True, null=True)),
                ("previous_data", models.TextField(blank=True, null=True)),
                (
                    "review_status",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                (
                    "reviewd_by",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                ("review_date", models.DateTimeField(blank=True, null=True)),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="BaseConfigurations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "base_configuration_key",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "base_configuration_value",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "base_configuration_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="images"
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
            ],
            options={
                "db_table": "base_configurations",
            },
        ),
        migrations.CreateModel(
            name="Bookmarks",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "bookmark_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("bookmarked", "bookmarked"),
                            ("bookmarked-removed", "bookmarked-removed"),
                        ],
                        max_length=100,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="BulkUploadErrorMessages",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uploaded_for",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                ("errors", models.TextField()),
                (
                    "ready_to_export",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="BulkUploadProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uploaded_for",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                (
                    "total_rows_count",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                (
                    "uploaded_rows_count",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                (
                    "uploading_status",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Cards",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("source_id", models.CharField(max_length=100, null=True)),
                ("customer_id", models.CharField(max_length=100, null=True)),
                (
                    "cardholder_name",
                    models.CharField(max_length=1000, null=True),
                ),
                ("postal_code", models.CharField(max_length=100, null=True)),
                ("locality", models.CharField(max_length=1000, null=True)),
                ("country", models.CharField(max_length=100, null=True)),
                (
                    "administrative_district_level_1",
                    models.CharField(max_length=1000, null=True),
                ),
                (
                    "address_line_1",
                    models.CharField(max_length=1000, null=True),
                ),
                (
                    "address_line_2",
                    models.CharField(max_length=1000, null=True),
                ),
                (
                    "card_brand",
                    models.CharField(max_length=1000, null=True, unique=True),
                ),
                ("last_4", models.IntegerField()),
                ("exp_month", models.IntegerField()),
                ("exp_year", models.IntegerField()),
                (
                    "card_id",
                    models.CharField(max_length=100, null=True, unique=True),
                ),
                (
                    "card_type",
                    models.CharField(max_length=100, null=True, unique=True),
                ),
                ("version", models.IntegerField()),
                (
                    "prepaid_type",
                    models.CharField(max_length=100, null=True, unique=True),
                ),
                (
                    "enabled",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChargePoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "charger_point_id",
                    models.CharField(
                        default="",
                        max_length=15,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "charger_point_name",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "charger_point_status",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "back_office",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "device_id",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "charge_point",
            },
        ),
        migrations.CreateModel(
            name="ChargingSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField(blank=True, null=True)),
                (
                    "emp_session_id",
                    models.CharField(
                        blank=True, max_length=500, null=True, unique=True
                    ),
                ),
                (
                    "session_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("start", "start"),
                            ("running", "running"),
                            ("rejected", "rejected"),
                            ("stop", "stop"),
                            ("closed", "closed"),
                            ("completed", "completed"),
                        ],
                        max_length=100,
                    ),
                ),
                ("payment_id", models.CharField(max_length=1000, null=True)),
                (
                    "paid_status",
                    models.CharField(
                        blank=True,
                        choices=[("paid", "paid"), ("unpaid", "unpaid")],
                        default="unpaid",
                        max_length=100,
                    ),
                ),
                ("payment_response", models.TextField(blank=True, null=True)),
                ("charging_data", models.TextField(blank=True, null=True)),
                (
                    "user_mail",
                    models.BinaryField(
                        blank=True, max_length="max", null=True
                    ),
                ),
                (
                    "mail_status",
                    models.CharField(
                        blank=True,
                        choices=[("pending", "pending"), ("sent", "sent")],
                        default="pending",
                        max_length=100,
                    ),
                ),
                (
                    "total_cost",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "feedback",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "rating",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MaxValueValidator(5),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    "is_reviewed",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("end_time", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ConnectorConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image_path",
                    models.ImageField(
                        blank=True, null=True, upload_to="images"
                    ),
                ),
                (
                    "connector_plug_type",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "connector_plug_type_name",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "deleted",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
            ],
            options={
                "db_table": "connector_configuration",
            },
        ),
        migrations.CreateModel(
            name="Content",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ElectricVehicleDatabase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vehicle_id",
                    models.CharField(blank=True, max_length=70, null=True),
                ),
                (
                    "misc_body",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "vehicle_make",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "vehicle_model",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "vehicle_model_version",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "range_real",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "battery_capacity_useable",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "charge_plug",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "fastcharge_plug",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "fastcharge_chargespeed",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "max_charge_speed",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                (
                    "ev_type",
                    models.CharField(
                        blank=True,
                        choices=[("bev", "bev"), ("phev", "phev")],
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "ev_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="images"
                    ),
                ),
                ("electric_vehicle_object", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="EmailVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        blank=True,
                        max_length=1000,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Plase enter email in valid format!",
                                regex="^(\\w|\\.|\\_|\\-)+[@](\\w|\\_|\\-|\\.)+[.]\\w{2,3}$",
                            )
                        ],
                    ),
                ),
                ("otp", models.CharField(blank=True, max_length=9, null=True)),
                (
                    "count",
                    models.IntegerField(
                        default=0, help_text="Number of otp sent"
                    ),
                ),
                (
                    "logged",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "otp_type",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("modified_date", models.DateTimeField()),
            ],
            options={
                "db_table": "email_verification",
            },
        ),
        migrations.CreateModel(
            name="LoginRecords",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Active", "Active"),
                            ("Inactive", "Inactive"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "device_mac_address",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "login_records",
            },
        ),
        migrations.CreateModel(
            name="MapMarkerConfigurations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "map_marker_key",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("map_marker_image", models.ImageField(upload_to="images")),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
            ],
            options={
                "db_table": "map_marker_configurations",
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="images"
                    ),
                ),
                (
                    "swarco_token",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "swarco_refresh_token",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "app_access_token",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "user_token",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "user_ev_ids",
                    models.CharField(blank=True, max_length=3000, null=True),
                ),
                (
                    "default_ev_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PromotionImages",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image_path",
                    models.ImageField(
                        blank=True, null=True, upload_to="images"
                    ),
                ),
                ("image_width", models.IntegerField(default=0)),
                ("image_height", models.IntegerField(default=0)),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
            options={
                "db_table": "promotion_images",
            },
        ),
        migrations.CreateModel(
            name="Promotions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "unique_code",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "retail_barcode",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "product",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "promotion_title",
                    models.CharField(blank=True, max_length=90, null=True),
                ),
                (
                    "m_code",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Active", "Active"),
                            ("Inactive", "Inactive"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "available_for",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("App Only", "App Only"),
                            ("Generic", "Generic"),
                            ("All", "All"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "offer_type",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("price", models.FloatField(default=0)),
                ("quantity", models.IntegerField(default=0)),
                (
                    "londis_code",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "budgen_code",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "shop_ids",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "offer_details",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "terms_and_conditions",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="images"
                    ),
                ),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PromotionsAvailableOn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "station_name",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "operation_region",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "region",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "area",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
            options={
                "db_table": "promotions_available_on",
            },
        ),
        migrations.CreateModel(
            name="ReviewLikes",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "review_response",
                    models.CharField(
                        blank=True,
                        choices=[("like", "like"), ("disLike", "disLike")],
                        max_length=100,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("update_date", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "review_likes",
            },
        ),
        migrations.CreateModel(
            name="Reviews",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "review",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        default="pending",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "flag",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "post_date",
                    models.DateTimeField(blank=True, max_length=100),
                ),
                (
                    "img_url",
                    models.ImageField(
                        blank=True, null=True, upload_to="images"
                    ),
                ),
                ("update_date", models.DateTimeField(blank=True, null=True)),
                (
                    "update_by",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RoleAccessTypes",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role_name",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
            ],
            options={
                "db_table": "role_access_Types",
            },
        ),
        migrations.CreateModel(
            name="ServiceConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "image_path",
                    models.ImageField(
                        blank=True, null=True, upload_to="images"
                    ),
                ),
                (
                    "service_type",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("service_unique_identifier", models.IntegerField(default=0)),
                (
                    "deleted",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
            ],
            options={
                "db_table": "service_configuration",
            },
        ),
        migrations.CreateModel(
            name="StationConnector",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "connector_id",
                    models.CharField(
                        default="",
                        max_length=15,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "connector_name",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "connector_type",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "plug_type_name",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "max_charge_rate",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "tariff_amount",
                    models.FloatField(
                        default=0,
                        validators=[
                            django.core.validators.MaxValueValidator(999),
                            django.core.validators.MinValueValidator(0),
                        ],
                    ),
                ),
                (
                    "tariff_currency",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "station_connector",
            },
        ),
        migrations.CreateModel(
            name="StationImages",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="images")),
                ("image_width", models.IntegerField(default=0)),
                ("image_height", models.IntegerField(default=0)),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "station_images",
            },
        ),
        migrations.CreateModel(
            name="Stations",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "station_id",
                    models.CharField(
                        default="",
                        max_length=10,
                        unique=True,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "station_name",
                    models.CharField(
                        default="",
                        max_length=120,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "station_address1",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "station_address2",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "station_address3",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "town",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "post_code",
                    models.CharField(
                        default="",
                        max_length=50,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "owner",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                ("latitude", models.FloatField(default=0)),
                ("longitude", models.FloatField(default=0)),
                (
                    "email",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "station_type",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "site_title",
                    models.CharField(
                        default="",
                        max_length=120,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "operation_region",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "regional_manager",
                    models.CharField(
                        default="",
                        max_length=120,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "area",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "area_regional_manager",
                    models.CharField(
                        default="",
                        max_length=120,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "is_mfg",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "is_ev",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("available_promotion", models.TextField(default="[]")),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SwarcoDynamicData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chargepoint_name",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                (
                    "chargepoint_status",
                    models.CharField(blank=True, max_length=60, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Trips",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "destination",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "miles",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "duration",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("ev_range", models.IntegerField(default=0)),
                (
                    "ev_battery",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MaxValueValidator(100),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    "ev_current_battery",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MaxValueValidator(100),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    "add_stop_automatically",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "add_spot_place_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "favourite",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "saved",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "store_id",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                (
                    "amenity_id",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                (
                    "charging_types",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                (
                    "station_distance",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MaxValueValidator(100),
                            django.core.validators.MinValueValidator(1),
                        ],
                    ),
                ),
                (
                    "fuel_station_type",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                (
                    "trip_options_filter",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                (
                    "connector_type_id",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                ("trip_data", models.TextField(blank=True, null=True)),
                (
                    "stations_data",
                    models.CharField(blank=True, max_length=600, null=True),
                ),
                (
                    "is_electric",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "user_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_trips",
                        related_query_name="user_trips",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TransactionsDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order_id",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "transaction_id",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "transaction_source",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "receipt_number",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "receipt_url",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "payment_method",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "issuing_bank",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("status", models.CharField(blank=True, max_length=100)),
                (
                    "comments",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "transaction_timestamp",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "transaction_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "transaction_status",
                    models.CharField(blank=True, max_length=100),
                ),
                (
                    "transaction_amount_money_amount",
                    models.FloatField(default=0),
                ),
                (
                    "transaction_app_fee_money_amount",
                    models.FloatField(default=0),
                ),
                (
                    "transaction_approved_money_amount",
                    models.FloatField(default=0),
                ),
                (
                    "transaction_app_fee_money_currency",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "transaction_approved_money_currency",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "transaction_amount_money_currency",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "processing_fee_currency",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "processing_fee_effective_at",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "processing_fee_type",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("settlement_amount", models.FloatField(default=0)),
                ("processing_fee_amount", models.FloatField(default=0)),
                (
                    "settlement_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "created_by",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "card_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sharedServices.profile",
                    ),
                ),
                (
                    "station_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sharedServices.stations",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Transactions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order_id",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "transaction_id",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "payment_id",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("gross_sales", models.FloatField(default=0)),
                ("discounts", models.FloatField(default=0)),
                ("net_sales", models.FloatField(default=0)),
                ("tax", models.FloatField(default=0)),
                ("tip", models.FloatField(default=0)),
                ("partial_refunds", models.FloatField(default=0)),
                ("total_collected", models.FloatField(default=0)),
                ("card", models.FloatField(default=0)),
                ("fees", models.FloatField(default=0)),
                ("net_total", models.FloatField(default=0)),
                (
                    "payment_method",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "pan_suffix",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "details",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "customer_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "transaction_status",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("transaction_amount", models.FloatField(default=0)),
                ("settlement_amount", models.FloatField(default=0)),
                (
                    "transaction_currency",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Exact", "Exact"),
                            ("Overpayment", "Overpayment"),
                            ("Underpayment", "Underpayment"),
                            ("-", "-"),
                        ],
                        default="-",
                        max_length=100,
                    ),
                ),
                (
                    "comments",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "transaction_timestamp",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "settlement_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "station_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sharedServices.stations",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ThirdPartyCredentials",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "username",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "password",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "owner",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                (
                    "token",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "refresh_token",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "disabled",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=60,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "user_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StationWorkingHours",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "monday_friday",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "saturday",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "sunday",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "station_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="working_hours_details",
                        related_query_name="working_hours_details",
                        to="sharedServices.stations",
                    ),
                ),
            ],
            options={
                "db_table": "station_working_hours",
            },
        ),
        migrations.CreateModel(
            name="StationServices",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "start_time",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "end_time",
                    models.CharField(
                        default="",
                        max_length=30,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "availability_days",
                    models.CharField(
                        choices=[
                            ("monday", "monday"),
                            ("tuesday", "tuesday"),
                            ("wednesday", "wednesday"),
                            ("thursday", "thursday"),
                            ("friday", "friday"),
                            ("saturday", "saturday"),
                            ("sunday", "sunday"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "deleted",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("created_date", models.DateTimeField(blank=True, null=True)),
                ("updated_date", models.DateTimeField(blank=True, null=True)),
                (
                    "updated_by",
                    models.CharField(
                        default="",
                        max_length=100,
                        validators=[
                            sharedServices.model_files.station_models.validate_min_length
                        ],
                    ),
                ),
                (
                    "service_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sharedServices.serviceconfiguration",
                    ),
                ),
                (
                    "station_id",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="services_list",
                        related_query_name="services_list",
                        to="sharedServices.stations",
                    ),
                ),
            ],
            options={
                "db_table": "station_services",
            },
        ),
        migrations.AddField(
            model_name="stationimages",
            name="station_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="image_url_list",
                related_query_name="image_url_list",
                to="sharedServices.stations",
            ),
        ),
        migrations.AddField(
            model_name="stationconnector",
            name="charge_point_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="connectors_list",
                related_query_name="connectors_list",
                to="sharedServices.chargepoint",
            ),
        ),
        migrations.AddField(
            model_name="stationconnector",
            name="station_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="station_connectors",
                related_query_name="station_connectors",
                to="sharedServices.stations",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceconfiguration",
            index=models.Index(
                condition=models.Q(("deleted", False)),
                fields=["service_type", "service_name"],
                name="servicesindexes",
            ),
        ),
        migrations.AddField(
            model_name="roleaccesstypes",
            name="access_content",
            field=models.ManyToManyField(to="sharedServices.Content"),
        ),
        migrations.AddField(
            model_name="reviews",
            name="station_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="station_reviews",
                related_query_name="station_reviews",
                to="sharedServices.stations",
            ),
        ),
        migrations.AddField(
            model_name="reviews",
            name="user_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="reviewlikes",
            name="review_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="review_response",
                related_query_name="review_response",
                to="sharedServices.reviews",
            ),
        ),
        migrations.AddField(
            model_name="reviewlikes",
            name="user_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="promotionsavailableon",
            name="promotion_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="station_available_promotions",
                related_query_name="station_available_promotions",
                to="sharedServices.promotions",
            ),
        ),
        migrations.AddField(
            model_name="promotionsavailableon",
            name="station_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="station_promotions",
                related_query_name="station_promotions",
                to="sharedServices.stations",
            ),
        ),
        migrations.AddField(
            model_name="promotionimages",
            name="promotion_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="sharedServices.promotions",
            ),
        ),
        migrations.AddField(
            model_name="profile",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user_profile",
                related_query_name="user_profile",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="loginrecords",
            name="user_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="sharedServices.adminuser",
            ),
        ),
        migrations.AddField(
            model_name="chargingsession",
            name="chargepoint_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="charging_sessions_chargepoints",
                related_query_name="charging_sessions_chargepoints",
                to="sharedServices.chargepoint",
            ),
        ),
        migrations.AddField(
            model_name="chargingsession",
            name="connector_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="charging_sessions_connectors",
                related_query_name="charging_sessions_connectors",
                to="sharedServices.stationconnector",
            ),
        ),
        migrations.AddField(
            model_name="chargingsession",
            name="station_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="station_charging_sessions",
                related_query_name="station_charging_sessions",
                to="sharedServices.stations",
            ),
        ),
        migrations.AddField(
            model_name="chargingsession",
            name="user_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="user_charging_sessions",
                related_query_name="user_charging_sessions",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="chargepoint",
            name="station_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="charge_points",
                related_query_name="charge_points",
                to="sharedServices.stations",
            ),
        ),
        migrations.AddField(
            model_name="cards",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user_cards",
                related_query_name="user_cards",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="bookmarks",
            name="bookmarked_station_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="user_bookmarks",
                related_query_name="user_bookmarks",
                to="sharedServices.stations",
            ),
        ),
        migrations.AddField(
            model_name="bookmarks",
            name="user_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="adminuser",
            name="role_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="sharedServices.roleaccesstypes",
            ),
        ),
        migrations.AddField(
            model_name="adminauthorization",
            name="user_id",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="sharedServices.adminuser",
            ),
        ),
        
        migrations.CreateModel(
            name='Loyalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.CharField(blank=True, max_length=60, null=True)),
                ('category', models.CharField(blank=True, max_length=60, null=True)),
                ('loyalty_title', models.CharField(blank=True, max_length=60, null=True)),
                ('status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=60, null=True)),
                ('valid_from_date', models.DateTimeField(blank=True, null=True)),
                ('valid_to_date', models.DateTimeField(blank=True, null=True)),
                ('number_of_paid_purchases', models.IntegerField(default=0)),
                ('timed_expiry', models.BooleanField(default=True)),
                ('bar_code_std', models.CharField(blank=True, max_length=100, null=True)),
                ('scheme_bar_code', models.CharField(blank=True, max_length=100, null=True)),
                ('product_bar_code', models.CharField(blank=True, max_length=100, null=True)),
                ('redeem_product_code', models.CharField(blank=True, max_length=100, null=True)),
                ('redeem_product', models.CharField(blank=True, max_length=100, null=True)),
                ('redeem_product_promotional_code', models.CharField(blank=True, max_length=100, null=True)),
                ('qr_refresh_time', models.IntegerField(default=5)),
                ('redemption_price', models.FloatField(default=0)),
                ('is_shop_wise', models.BooleanField(default=True)),
                ('shop_ids', models.CharField(blank=True, max_length=1000, null=True)),
                ('deleted', models.BooleanField(default=False)),
                ('available_for', models.CharField(blank=True, choices=[('App Only', 'App Only'), ('Generic', 'Generic'), ('All', 'All')], max_length=100)),
                ('cycle_duration', models.CharField(blank=True, max_length=100)),
                ('redeem_type', models.CharField(blank=True, choices=[('Count', 'Count'), ('Amount', 'Amount')], max_length=100, null=True)),
                ('unique_code', models.CharField(blank=True, max_length=100, null=True)),
                ('loyalty_validity_duration', models.CharField(blank=True, max_length=100, null=True)),
                ('offer_details', models.CharField(blank=True, max_length=500, null=True)),
                ('terms_and_conditions', models.CharField(blank=True, max_length=500, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('expiry_in_days', models.IntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        
        migrations.AddField(
            model_name='chargingsession',
            name='back_office',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='chargingsession',
            name='charging_session_id',
            field=models.CharField(blank=True, max_length=500, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='chargingsession',
            name='is_force_stopped',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='chargingsession',
            name='user_account_number',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='driivz_account_number',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='driivz_virtual_card_id',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='driivz_virtual_card_number',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='stationconnector',
            name='current_status',
            field=models.CharField(default='Not available', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length]),
        ),
        migrations.AlterField(
            model_name='audittrail',
            name='action',
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='audittrail',
            name='data_id',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='audittrail',
            name='module',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='audittrail',
            name='review_status',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='audittrail',
            name='reviewd_by',
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='baseconfigurations',
            name='base_configuration_key',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='baseconfigurations',
            name='updated_by',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='bookmarks',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev'),
        ),
        migrations.AlterField(
            model_name='bulkuploaderrormessages',
            name='uploaded_for',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='bulkuploadprogress',
            name='total_rows_count',
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='bulkuploadprogress',
            name='uploaded_for',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='bulkuploadprogress',
            name='uploaded_rows_count',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='bulkuploadprogress',
            name='uploading_status',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='cards',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_cards', related_query_name='user_cards', to='sharedServices.mfguserev'),
        ),
        migrations.AlterField(
            model_name='chargingsession',
            name='session_status',
            field=models.CharField(blank=True, choices=[('start', 'start'), ('running', 'running'), ('rejected', 'rejected'), ('stopped', 'stopped'), ('closed', 'closed'), ('completed', 'completed')], max_length=100),
        ),
        migrations.AlterField(
            model_name='chargingsession',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_charging_sessions', related_query_name='user_charging_sessions', to='sharedServices.mfguserev'),
        ),
        migrations.AlterField(
            model_name='chargingsession',
            name='user_mail',
            field=models.BinaryField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='connectorconfiguration',
            name='updated_by',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='mapmarkerconfigurations',
            name='map_marker_key',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='mapmarkerconfigurations',
            name='updated_by',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='mfguserev',
            name='country',
            field=models.BinaryField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='mfguserev',
            name='encrypted_email',
            field=models.BinaryField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='mfguserev',
            name='first_name',
            field=models.BinaryField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='mfguserev',
            name='key',
            field=models.BinaryField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='mfguserev',
            name='last_name',
            field=models.BinaryField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='mfguserev',
            name='post_code',
            field=models.BinaryField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='mfguserev',
            name='username',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', related_query_name='user_profile', to='sharedServices.mfguserev'),
        ),
        migrations.AlterField(
            model_name='promotions',
            name='budgen_code',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotions',
            name='londis_code',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotions',
            name='m_code',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotions',
            name='offer_type',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotions',
            name='product',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotions',
            name='promotion_title',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotions',
            name='retail_barcode',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotions',
            name='unique_code',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotionsavailableon',
            name='area',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotionsavailableon',
            name='operation_region',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotionsavailableon',
            name='region',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='promotionsavailableon',
            name='station_name',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='reviewlikes',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev'),
        ),
        migrations.AlterField(
            model_name='reviews',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev'),
        ),
        migrations.AlterField(
            model_name='serviceconfiguration',
            name='service_name',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='serviceconfiguration',
            name='updated_by',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='stations',
            name='station_address1',
            field=models.CharField(default='', max_length=500, validators=[sharedServices.model_files.station_models.validate_min_length]),
        ),
        migrations.AlterField(
            model_name='stations',
            name='station_address2',
            field=models.CharField(default='', max_length=500, validators=[sharedServices.model_files.station_models.validate_min_length]),
        ),
        migrations.AlterField(
            model_name='stations',
            name='station_address3',
            field=models.CharField(default='', max_length=500, validators=[sharedServices.model_files.station_models.validate_min_length]),
        ),
        migrations.AlterField(
            model_name='thirdpartycredentials',
            name='user_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev'),
        ),
        migrations.AlterField(
            model_name='trips',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_trips', related_query_name='user_trips', to='sharedServices.mfguserev'),
        ),
        migrations.CreateModel(
            name='UserLoyaltyTransactions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_transactions', models.FloatField(default=0)),
                ('transaction_ids', models.CharField(blank=True, max_length=1000, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('action_code', models.CharField(blank=True, choices=[('Purchased', 'Purchased'), ('Redeemed', 'Redeemed')], max_length=60, null=True)),
                ('expired_on', models.DateTimeField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('loyalty_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_loyalty_transactions', related_query_name='user_loyalty_transactions', to='sharedServices.loyalty')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_wise_loyalties', related_query_name='user_wise_loyalties', to='sharedServices.mfguserev')),
            ],
        ),
        migrations.CreateModel(
            name='LoyaltyTransactions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qr_code', models.CharField(blank=True, max_length=1000, null=True)),
                ('transaction_response', models.TextField(blank=True, null=True)),
                ('transaction_time', models.DateTimeField(blank=True, null=True)),
                ('transaction_type', models.CharField(blank=True, choices=[('Purchased', 'Purchased'), ('Redeemed', 'Redeemed')], max_length=60, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('loyalty_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loyalty_transactions', related_query_name='loyalty_transactions', to='sharedServices.loyalty')),
                ('station_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_loyalty_transacions', related_query_name='station_loyalties_transactions', to='sharedServices.stations')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_loyalties', related_query_name='user_loyalties', to='sharedServices.mfguserev')),
            ],
        ),
        
        migrations.CreateModel(
            name='LoyaltyProducts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_plu', models.CharField(blank=True, max_length=100, null=True)),
                ('product_bar_code', models.CharField(blank=True, max_length=100, null=True)),
                ('desc', models.CharField(blank=True, max_length=1000, null=True)),
                ('price', models.FloatField()),
                ('redeem_product_promotion_price', models.FloatField(default=0)),
                ('status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=60, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('loyalty_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loyalty_products', related_query_name='loyalty_products', to='sharedServices.loyalty')),
            ],
        ),
        
        migrations.CreateModel(
            name='LoyaltyBulkUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_bulk_data', models.TextField()),
                ('transaction_data_size', models.IntegerField()),
                ('status', models.CharField(blank=True, choices=[('In progress', 'In progress'), ('Queued', 'Queued'), ('completed', 'completed'), ('Need review', 'Need review'), ('Failed', 'Failed')], default='Queued', max_length=100, null=True)),
                ('is_reconciled', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev')),
            ],
        ),
        
        migrations.CreateModel(
            name='LoyaltyAvailableOn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('station_name', models.CharField(blank=True, max_length=30, null=True)),
                ('operation_region', models.CharField(blank=True, max_length=30, null=True)),
                ('region', models.CharField(blank=True, max_length=30, null=True)),
                ('area', models.CharField(blank=True, max_length=30, null=True)),
                ('deleted', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('loyalty_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_available_loyalties', related_query_name='station_available_loyalties', to='sharedServices.loyalty')),
                ('station_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_loyalties', related_query_name='station_loyalties', to='sharedServices.stations')),
            ],
            options={
                'db_table': 'loyalties_available_on',
            },
        ),
        migrations.AlterField(
            model_name='adminauthorization',
            name='token_secret',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddIndex(
            model_name='baseconfigurations',
            index=models.Index(fields=['base_configuration_key'], name='base_config_base_co_9b6185_idx'),
        ),
        migrations.AddIndex(
            model_name='chargepoint',
            index=models.Index(condition=models.Q(('charger_point_status', 'Active')), fields=['station_id'], name='chargepointindexes'),
        ),
        migrations.AddIndex(
            model_name='chargingsession',
            index=models.Index(fields=['emp_session_id'], name='chargingsessionidindexes'),
        ),
        migrations.AddIndex(
            model_name='chargingsession',
            index=models.Index(fields=['end_time'], name='chargingsessionendtimeindexes'),
        ),
        migrations.AddIndex(
            model_name='connectorconfiguration',
            index=models.Index(condition=models.Q(('deleted', False)), fields=['connector_plug_type'], name='connectorsindexes'),
        ),
        migrations.AddIndex(
            model_name='electricvehicledatabase',
            index=models.Index(fields=['vehicle_id'], name='electricvehicledatabaseindexes'),
        ),
        migrations.AddIndex(
            model_name='electricvehicledatabase',
            index=models.Index(fields=['ev_type'], name='electricvehicleevtypeindexes'),
        ),
        migrations.AddIndex(
            model_name='loyalty',
            index=models.Index(condition=models.Q(('status', 'Active')), fields=['-valid_from_date'], name='loyaltyindexes'),
        ),
        migrations.AddIndex(
            model_name='mapmarkerconfigurations',
            index=models.Index(fields=['map_marker_key'], name='map_marker__map_mar_e4d876_idx'),
        ),
        migrations.AddIndex(
            model_name='promotions',
            index=models.Index(condition=models.Q(('status', 'Active')), fields=['-start_date'], name='promotionsindexes'),
        ),
        migrations.AddIndex(
            model_name='promotionsavailableon',
            index=models.Index(condition=models.Q(('deleted', False)), fields=['station_id', 'promotion_id'], name='promotionstationsindexes'),
        ),
        migrations.AddIndex(
            model_name='stationconnector',
            index=models.Index(condition=models.Q(('status', 'Active')), fields=['station_id', 'charge_point_id'], name='stationconnectorindexes'),
        ),
        migrations.AddIndex(
            model_name='stationimages',
            index=models.Index(condition=models.Q(('deleted', False)), fields=['station_id'], name='stationimagesindexes'),
        ),
        migrations.AddIndex(
            model_name='stations',
            index=models.Index(condition=models.Q(('status', 'Active')), fields=['latitude', 'longitude'], name='stationsindex'),
        ),
        migrations.AddIndex(
            model_name='stationservices',
            index=models.Index(condition=models.Q(('deleted', False)), fields=['station_id', 'service_name', 'service_id'], name='stationservicesindexes'),
        ),
        migrations.AddIndex(
            model_name='loyaltyavailableon',
            index=models.Index(condition=models.Q(('deleted', 'No')), fields=['station_id', 'loyalty_id'], name='loyaltystationsindexes'),
        ),
    ]
