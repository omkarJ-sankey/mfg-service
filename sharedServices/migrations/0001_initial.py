# Generated by Django 5.0.9 on 2025-10-23 12:08

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_ckeditor_5.fields
import sharedServices.model_files.station_models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('full_name', models.CharField(blank=True, max_length=100, null=True)),
                ('user_name', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='images')),
                ('first_time_login', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=100, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'admin_user',
            },
        ),
        migrations.CreateModel(
            name='AmpecoData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=50, null=True)),
                ('fetch_error_details', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ampeco_data',
            },
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField()),
                ('user_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('user_role', models.CharField(blank=True, max_length=1000, null=True)),
                ('action', models.CharField(blank=True, max_length=1000, null=True)),
                ('module', models.CharField(blank=True, max_length=100, null=True)),
                ('module_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('data_db_id', models.CharField(blank=True, max_length=100, null=True)),
                ('changes_reference_id', models.CharField(blank=True, max_length=100, null=True)),
                ('new_data', models.TextField(blank=True, null=True)),
                ('previous_data', models.TextField(blank=True, null=True)),
                ('review_status', models.CharField(blank=True, default='No', max_length=100, null=True)),
                ('reviewd_by', models.CharField(blank=True, max_length=1000, null=True)),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BulkUploadErrorMessages',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uploaded_for', models.CharField(blank=True, max_length=100, null=True)),
                ('errors', models.TextField()),
                ('ready_to_export', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BulkUploadProgress',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uploaded_for', models.CharField(blank=True, max_length=100, null=True)),
                ('total_rows_count', models.CharField(blank=True, max_length=1000, null=True)),
                ('uploaded_rows_count', models.CharField(blank=True, max_length=100, null=True)),
                ('uploading_status', models.CharField(blank=True, max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChargePoint',
            fields=[
                ('charge_point_id', models.AutoField(primary_key=True, serialize=False)),
                ('charger_point_id', models.CharField(default='', max_length=15, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('charger_point_name', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('charger_point_status', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('back_office', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('device_id', models.CharField(blank=True, max_length=15, null=True)),
                ('payter_terminal_id', models.CharField(blank=True, max_length=100, null=True)),
                ('worldline_terminal_id', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('ev_charge_point_status', models.CharField(blank=True, max_length=100, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('ampeco_charge_point_id', models.CharField(blank=True, max_length=30, null=True)),
                ('ampeco_charge_point_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'charge_point',
            },
        ),
        migrations.CreateModel(
            name='ContactlessReceiptEmailTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=100, null=True)),
                ('session_id', models.CharField(max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('source', models.CharField(default='driivz and payter', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DriivzData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=75, null=True, unique=True)),
                ('data', models.TextField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'driivz_data',
            },
        ),
        migrations.CreateModel(
            name='EmailAttachments',
            fields=[
                ('attachment_id', models.AutoField(primary_key=True, serialize=False)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='images')),
                ('attachment_size', models.IntegerField(blank=True, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(blank=True, max_length=1000, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Plase enter email in valid format!', regex='^(\\w|\\.|\\_|\\-)+[@](\\w|\\_|\\-|\\.)+[.]\\w{2,3}$')])),
                ('verify_email', models.CharField(blank=True, max_length=1000)),
                ('otp', models.CharField(blank=True, max_length=9, null=True)),
                ('count', models.IntegerField(default=0, help_text='Number of otp sent')),
                ('logged', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('otp_type', models.CharField(blank=True, max_length=20, null=True)),
                ('modified_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'email_verification',
            },
        ),
        migrations.CreateModel(
            name='Loyalty',
            fields=[
                ('loyalty_id', models.AutoField(primary_key=True, serialize=False)),
                ('product', models.CharField(blank=True, max_length=60, null=True)),
                ('category', models.CharField(blank=True, max_length=60, null=True)),
                ('loyalty_title', models.CharField(blank=True, max_length=60, null=True)),
                ('status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=60, null=True)),
                ('offer_type', models.CharField(blank=True, choices=[('Generic Offers', 'Generic Offers'), ('Loyalty Offers', 'Loyalty Offers')], max_length=60, null=True)),
                ('valid_from_date', models.DateTimeField(blank=True, null=True)),
                ('valid_to_date', models.DateTimeField(blank=True, null=True)),
                ('show_occurrence_offer', models.BooleanField(default=False, null=True)),
                ('number_of_paid_purchases', models.FloatField(default=0)),
                ('timed_expiry', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('occurance_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('bar_code_std', models.CharField(blank=True, max_length=100, null=True)),
                ('scheme_bar_code', models.CharField(blank=True, max_length=100, null=True)),
                ('product_bar_code', models.CharField(blank=True, max_length=100, null=True)),
                ('redeem_product_code', models.CharField(blank=True, max_length=100, null=True)),
                ('redeem_product', models.CharField(blank=True, max_length=100, null=True)),
                ('redeem_product_promotional_code', models.CharField(blank=True, max_length=100, null=True)),
                ('qr_refresh_time', models.IntegerField(default=5)),
                ('redemption_price', models.FloatField(default=0)),
                ('is_shop_wise', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('shop_ids', models.CharField(blank=True, max_length=1000, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('available_for', models.CharField(blank=True, choices=[('App Only', 'App Only'), ('Generic', 'Generic'), ('All', 'All')], max_length=100)),
                ('cycle_duration', models.CharField(blank=True, max_length=100)),
                ('redeem_type', models.CharField(blank=True, choices=[('Count', 'Count'), ('Amount', 'Amount')], max_length=100, null=True)),
                ('unique_code', models.CharField(blank=True, max_length=100, null=True)),
                ('loyalty_validity_duration', models.CharField(blank=True, max_length=100, null=True)),
                ('offer_details', models.CharField(blank=True, max_length=1100, null=True)),
                ('terms_and_conditions', models.CharField(blank=True, max_length=4000, null=True)),
                ('steps_to_redeem', models.CharField(blank=True, max_length=1100, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('station_loyalty_card_image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('loyalty_type', models.CharField(blank=True, max_length=60, null=True)),
                ('number_of_total_issuances', models.IntegerField(blank=True, null=True)),
                ('number_of_issued_vouchers', models.IntegerField(blank=True, null=True)),
                ('reward_image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('reward_activated_notification_expiry', models.IntegerField(default=0, null=True)),
                ('reward_expiration_notification_expiry', models.IntegerField(default=0, null=True)),
                ('expire_reward_before_x_number_of_days', models.IntegerField(default=0, null=True)),
                ('expiry_in_days', models.IntegerField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('reward_expiry_notification_trigger_time', models.CharField(blank=True, max_length=100, null=True)),
                ('loyalty_list_footer_message', models.CharField(blank=True, max_length=100, null=True)),
                ('trigger_sites', models.JSONField(blank=True, help_text='List of station IDs for custom trigger sites', null=True)),
                ('transaction_count_for_costa_kwh_consumption', models.FloatField(blank=True, help_text='Required kWh consumption at trigger sites for activation', null=True)),
                ('detail_site_check', models.BooleanField(default=False, null=True)),
                ('visibility', models.CharField(blank=True, choices=[('Guest Users', 'Guest Users'), ('Registered Users', 'Registered Users'), ('All Users', 'All Users')], max_length=100, null=True)),
                ('is_car_wash', models.BooleanField(default=False, null=True)),
                ('display_on_charging_screen', models.BooleanField(default=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MFGUserEV',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.CharField(blank=True, max_length=1000, null=True, unique=True)),
                ('user_email', models.CharField(blank=True, max_length=1000, null=True)),
                ('password', models.CharField(blank=True, max_length=1000, null=True)),
                ('first_name', models.BinaryField(blank=True, max_length='max', null=True)),
                ('last_name', models.BinaryField(blank=True, max_length='max', null=True)),
                ('username', models.CharField(blank=True, max_length=100, null=True)),
                ('post_code', models.BinaryField(blank=True, max_length='max', null=True)),
                ('country', models.BinaryField(blank=True, max_length='max', null=True)),
                ('key', models.BinaryField(blank=True, max_length='max', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('customer_id', models.CharField(max_length=1000, null=True)),
                ('encrypted_email', models.BinaryField(blank=True, max_length='max', null=True)),
                ('phone_number', models.BinaryField(blank=True, max_length='max', null=True)),
                ('hashed_phone_number', models.CharField(max_length=1000, null=True, unique=True)),
                ('sign_in_method', models.CharField(blank=True, choices=[('Google Sign In', 'Google Sign In'), ('Apple Sign In', 'Apple Sign In'), ('Email Sign In', 'Email Sign In'), ('Guest Sign In', 'Guest Sign In')], max_length=1000, null=True)),
                ('device_token', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'mfg_user_ev',
            },
        ),
        migrations.CreateModel(
            name='OCPICredentialsRole',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(blank=True, max_length=10, null=True)),
                ('business_details', models.CharField(blank=True, max_length=50, null=True)),
                ('created_date', models.DateTimeField()),
                ('updated_date', models.DateTimeField()),
                ('updated_by', models.CharField(max_length=100)),
                ('party_id', models.CharField(max_length=50)),
                ('country_code', models.CharField(max_length=50)),
                ('credential_id', models.BigIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OCPILocation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('location_id', models.CharField(max_length=36)),
                ('country_code', models.CharField(max_length=2)),
                ('party_id', models.CharField(max_length=3)),
                ('publish', models.BooleanField()),
                ('publish_allowed_to', models.JSONField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(max_length=45)),
                ('city', models.CharField(max_length=45)),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True)),
                ('state', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(max_length=3)),
                ('coordinates', models.JSONField(max_length=50)),
                ('related_locations', models.JSONField(blank=True, null=True)),
                ('parking_type', models.CharField(blank=True, choices=[('ALONG_MOTORWAY', 'ALONG_MOTORWAY'), ('PARKING_GARAGE', 'PARKING_GARAGE'), ('PARKING_LOT', 'PARKING_LOT'), ('ON_DRIVEWAY', 'ON_DRIVEWAY'), ('ON_STREET', 'ON_STREET'), ('UNDERGROUND_GARAGE', 'UNDERGROUND_GARAGE')], max_length=255, null=True)),
                ('time_zone', models.CharField(max_length=255)),
                ('opening_times', models.JSONField(blank=True, null=True)),
                ('charging_when_closed', models.BooleanField(blank=True, null=True)),
                ('directions', models.JSONField(blank=True, null=True)),
                ('operator', models.JSONField(blank=True, null=True)),
                ('suboperator', models.JSONField(blank=True, null=True)),
                ('owner', models.JSONField(blank=True, null=True)),
                ('facilities', models.CharField(blank=True, max_length=1000, null=True)),
                ('images', models.JSONField(blank=True, null=True)),
                ('energy_mix', models.JSONField(blank=True, null=True)),
                ('last_updated', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='PushNotifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assign_to', models.TextField(blank=True, null=True)),
                ('notification_for', models.CharField(blank=True, max_length=60, null=True)),
                ('regions', models.CharField(blank=True, max_length=255, null=True)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('screens', models.CharField(blank=True, max_length=255, null=True)),
                ('category', models.CharField(blank=True, max_length=60, null=True)),
                ('push_notification', models.CharField(blank=True, max_length=60, null=True)),
                ('inapp_notification', models.CharField(blank=True, max_length=60, null=True)),
                ('image', models.ImageField(blank=True, default='img/logo-black.png', null=True, upload_to='')),
                ('scheduled_time', models.DateTimeField(blank=True, null=True)),
                ('delivered_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=60, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=10, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('domain', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReceiptHeroReceiptsData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(max_length=100, null=True)),
                ('transaction_id', models.CharField(max_length=100)),
                ('rh_data', models.TextField(null=True)),
                ('driivz_data', models.TextField(null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(max_length=100, null=True)),
            ],
            options={
                'db_table': 'receiptHero_receipts_data',
            },
        ),
        migrations.CreateModel(
            name='SwarcoDynamicData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('chargepoint_name', models.CharField(blank=True, max_length=600, null=True)),
                ('chargepoint_status', models.CharField(blank=True, max_length=60, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TariffElements',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sharedServices_tariffelements',
            },
        ),
        migrations.CreateModel(
            name='Tariffs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tariff_id', models.CharField(max_length=36)),
                ('country_code', models.CharField(max_length=2)),
                ('party_id', models.CharField(max_length=10)),
                ('currency', models.CharField(max_length=10)),
                ('type', models.CharField(choices=[('AD_HOC_PAYMENT', 'AD_HOC_PAYMENT'), ('PROFILE_CHEAP', 'PROFILE_CHEAP'), ('PROFILE_FAST', 'PROFILE_FAST'), ('PROFILE_GREEN', 'PROFILE_GREEN'), ('REGULAR', 'REGULAR')], max_length=20, null=True)),
                ('tariff_alt_url', models.CharField(blank=True, max_length=512, null=True)),
                ('tariff_alt_text', models.TextField(blank=True, null=True)),
                ('min_price_incl_vat', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('max_price_incl_vat', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('min_price_excl_vat', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('max_price_excl_vat', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('start_date_time', models.DateTimeField(blank=True, null=True)),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('energy_mix', models.TextField(blank=True, null=True)),
                ('last_updated', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='ThirdPartyCredentials',
            fields=[
                ('third_party_user_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=100, null=True)),
                ('password', models.CharField(blank=True, max_length=500, null=True)),
                ('owner', models.CharField(blank=True, max_length=500, null=True)),
                ('token', models.CharField(blank=True, max_length=1000, null=True)),
                ('refresh_token', models.CharField(blank=True, max_length=1000, null=True)),
                ('disabled', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=60, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ThirdPartyServicesData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_date', models.DateTimeField(blank=True, null=True)),
                ('source', models.CharField(max_length=100, null=True)),
                ('data', models.TextField(null=True)),
                ('status', models.CharField(blank=True, choices=[('Complete', 'Complete'), ('Inprogress', 'Inprogress'), ('Failed', 'Failed')], default='Inprogress', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(max_length=100, null=True)),
                ('details', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'thirdparty_services_data',
            },
        ),
        migrations.CreateModel(
            name='ThreeDSCheckLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[('Successful', 'Successful'), ('Failed', 'Failed')], default='Successful', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ThreeDSTriggerLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason_for_3ds', models.CharField(blank=True, max_length=100, null=True)),
                ('reason_for_3ds_kwh', models.CharField(blank=True, max_length=100, null=True)),
                ('reason_for_3ds_days', models.CharField(blank=True, max_length=100, null=True)),
                ('reason_for_3ds_transactions', models.CharField(blank=True, max_length=100, null=True)),
                ('configuration_set_by_admin_for_3ds', models.CharField(blank=True, max_length=100, null=True)),
                ('configuration_set_by_admin_for_3ds_kwh', models.CharField(blank=True, max_length=100, null=True)),
                ('configuration_set_by_admin_for_3ds_days', models.CharField(blank=True, max_length=100, null=True)),
                ('configuration_set_by_admin_for_3ds_transactions', models.CharField(blank=True, max_length=100, null=True)),
                ('remaining_3ds_check_transaction', models.IntegerField(default=0, null=True)),
                ('status', models.CharField(blank=True, choices=[('Triggered', 'Triggered'), ('Running', 'Running'), ('Completed', 'Completed')], default='Triggered', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Transactions',
            fields=[
                ('transactions_db_id', models.AutoField(primary_key=True, serialize=False)),
                ('order_id', models.CharField(blank=True, max_length=30, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=30, null=True)),
                ('payment_id', models.CharField(blank=True, max_length=30, null=True)),
                ('gross_sales', models.FloatField(default=0)),
                ('discounts', models.FloatField(default=0)),
                ('net_sales', models.FloatField(default=0)),
                ('tax', models.FloatField(default=0)),
                ('tip', models.FloatField(default=0)),
                ('partial_refunds', models.FloatField(default=0)),
                ('total_collected', models.FloatField(default=0)),
                ('card', models.FloatField(default=0)),
                ('fees', models.FloatField(default=0)),
                ('net_total', models.FloatField(default=0)),
                ('payment_method', models.CharField(blank=True, max_length=30, null=True)),
                ('pan_suffix', models.CharField(blank=True, max_length=10, null=True)),
                ('details', models.CharField(blank=True, max_length=1000, null=True)),
                ('customer_id', models.CharField(blank=True, max_length=100, null=True)),
                ('transaction_status', models.CharField(blank=True, max_length=100, null=True)),
                ('transaction_amount', models.FloatField(default=0)),
                ('settlement_amount', models.FloatField(default=0)),
                ('transaction_currency', models.CharField(blank=True, max_length=10, null=True)),
                ('status', models.CharField(blank=True, choices=[('Exact', 'Exact'), ('Overpayment', 'Overpayment'), ('Underpayment', 'Underpayment'), ('-', '-')], default='-', max_length=100)),
                ('payment_for', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_for_reference_id', models.IntegerField(blank=True, null=True)),
                ('comments', models.CharField(blank=True, max_length=100, null=True)),
                ('transaction_timestamp', models.DateTimeField(blank=True, null=True)),
                ('settlement_date', models.DateTimeField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_response', models.TextField(blank=True, null=True)),
                ('is_ocpi_session', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionsDetails',
            fields=[
                ('transactions_db_id', models.AutoField(primary_key=True, serialize=False)),
                ('order_id', models.CharField(blank=True, max_length=30, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=30, null=True)),
                ('transaction_source', models.CharField(blank=True, max_length=30, null=True)),
                ('receipt_number', models.CharField(blank=True, max_length=30, null=True)),
                ('receipt_url', models.CharField(blank=True, max_length=1000, null=True)),
                ('payment_method', models.CharField(blank=True, max_length=30, null=True)),
                ('issuing_bank', models.CharField(blank=True, max_length=30, null=True)),
                ('status', models.CharField(blank=True, max_length=100)),
                ('comments', models.CharField(blank=True, max_length=100, null=True)),
                ('transaction_timestamp', models.DateTimeField(blank=True, null=True)),
                ('transaction_date', models.DateTimeField(blank=True, null=True)),
                ('transaction_status', models.CharField(blank=True, max_length=100)),
                ('transaction_amount_money_amount', models.FloatField(default=0)),
                ('transaction_app_fee_money_amount', models.FloatField(default=0)),
                ('transaction_approved_money_amount', models.FloatField(default=0)),
                ('transaction_app_fee_money_currency', models.CharField(blank=True, max_length=10, null=True)),
                ('transaction_approved_money_currency', models.CharField(blank=True, max_length=10, null=True)),
                ('transaction_amount_money_currency', models.CharField(blank=True, max_length=10, null=True)),
                ('processing_fee_currency', models.CharField(blank=True, max_length=10, null=True)),
                ('processing_fee_effective_at', models.DateTimeField(blank=True, null=True)),
                ('processing_fee_type', models.CharField(blank=True, max_length=100, null=True)),
                ('settlement_amount', models.FloatField(default=0)),
                ('processing_fee_amount', models.FloatField(default=0)),
                ('settlement_date', models.DateTimeField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_by', models.CharField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionsTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_customer_id', models.CharField(max_length=1000, null=True)),
                ('payment_id', models.CharField(blank=True, max_length=200, null=True)),
                ('payment_for_type', models.CharField(blank=True, choices=[('Wallet', 'Wallet'), ('Loyalty', 'Loyalty')], default='', max_length=100, null=True)),
                ('payment_for_subtype', models.CharField(blank=True, choices=[('Load', 'Load'), ('Activate', 'Activate'), ('Redeem', 'Redeem')], default='', max_length=100, null=True)),
                ('payment_status', models.CharField(blank=True, choices=[('Successful', 'Successful'), ('Unsuccessful', 'Unsuccessful')], default='', max_length=100, null=True)),
                ('payment_response', models.TextField(blank=True, null=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('payment_reference_id', models.IntegerField(default=0)),
                ('transaction_amount', models.IntegerField(default=0)),
                ('reference_current_status', models.CharField(blank=True, choices=[('Successful', 'Successful'), ('Unsuccessful', 'Unsuccessful')], default='', max_length=100, null=True)),
                ('reference_response', models.TextField(blank=True, null=True)),
                ('refund_reference_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('refund_status', models.CharField(blank=True, choices=[('Pending', 'Pending'), ('Failed', 'Failed'), ('Rejected', 'Rejected'), ('Completed', 'Completed')], default=None, max_length=100, null=True)),
                ('refund_amount', models.IntegerField(default=0)),
                ('refund_response', models.TextField(blank=True, null=True)),
                ('refund_initiated_date', models.DateTimeField(blank=True, null=True)),
                ('refund_completed_date', models.DateTimeField(blank=True, null=True)),
                ('is_reviewed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('comments', models.CharField(blank=True, max_length=1000, null=True)),
                ('driivz_account_number', models.CharField(blank=True, max_length=100, null=True)),
                ('user_updated_balance', models.CharField(blank=True, max_length=100, null=True)),
                ('processed_by', models.CharField(blank=True, choices=[('Admin', 'Admin'), ('App', 'App')], default='App', max_length=100, null=True)),
                ('is_withdrawn', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Trips',
            fields=[
                ('trip_id', models.AutoField(primary_key=True, serialize=False)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
                ('destination', models.CharField(blank=True, max_length=100, null=True)),
                ('miles', models.CharField(blank=True, max_length=100, null=True)),
                ('duration', models.CharField(blank=True, max_length=100, null=True)),
                ('ev_range', models.IntegerField(default=0)),
                ('ev_battery', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('ev_current_battery', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('add_stop_automatically', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('add_spot_place_id', models.CharField(blank=True, max_length=100, null=True)),
                ('favourite', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('saved', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('store_id', models.CharField(blank=True, max_length=600, null=True)),
                ('amenity_id', models.CharField(blank=True, max_length=600, null=True)),
                ('charging_types', models.CharField(blank=True, max_length=600, null=True)),
                ('station_distance', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)])),
                ('fuel_station_type', models.CharField(blank=True, max_length=600, null=True)),
                ('trip_options_filter', models.CharField(blank=True, max_length=600, null=True)),
                ('connector_type_id', models.CharField(blank=True, max_length=600, null=True)),
                ('trip_data', models.TextField(blank=True, null=True)),
                ('stations_data', models.CharField(blank=True, max_length=600, null=True)),
                ('is_electric', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserEVs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('default', models.BooleanField(default=False, null=True)),
                ('vehicle_registration_number', models.CharField(blank=True, max_length=150, null=True)),
                ('vehicle_nickname', models.CharField(blank=True, max_length=150, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserLoyaltyTransactions',
            fields=[
                ('user_transaction_id', models.AutoField(primary_key=True, serialize=False)),
                ('number_of_transactions', models.FloatField(default=0)),
                ('transaction_ids', models.CharField(blank=True, max_length=1000, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('action_code', models.CharField(blank=True, choices=[('Purchased', 'Purchased'), ('Redeemed', 'Redeemed'), ('Burned', 'Burned')], max_length=60, null=True)),
                ('expired_on', models.DateTimeField(blank=True, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserSelectedStationFinderFilters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_filter_data', models.TextField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='ValetingMachine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_id', models.BigIntegerField(unique=True)),
                ('machine_name', models.CharField(blank=True, max_length=255, null=True)),
                ('machine_number', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'valeting_machine',
            },
        ),
        migrations.CreateModel(
            name='ValetingTerminals',
            fields=[
                ('status', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('valeting_terminals_id', models.AutoField(primary_key=True, serialize=False)),
                ('payter_serial_number', models.CharField(blank=True, max_length=100, null=True)),
                ('amenities', models.CharField(blank=True, max_length=1000, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('deleted', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ValetingTransactionData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('card_number', models.CharField(blank=True, max_length=50, null=True)),
                ('transaction_date', models.DateTimeField(blank=True, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('valeting_site_id', models.CharField(max_length=100)),
                ('data', models.TextField(null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'valeting_transaction_data',
            },
        ),
        migrations.CreateModel(
            name='AdminAuthorization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('otp_type', models.CharField(blank=True, db_index=True, max_length=20, null=True)),
                ('password', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('token', models.CharField(blank=True, db_index=True, max_length=1000, null=True)),
                ('token_secret', models.CharField(blank=True, max_length=200, null=True)),
                ('refresh_token', models.CharField(blank=True, db_index=True, max_length=1000, null=True)),
                ('token_expire_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.adminuser')),
            ],
            options={
                'db_table': 'admin_authorization',
            },
        ),
        migrations.CreateModel(
            name='BaseConfigurations',
            fields=[
                ('base_configuration_id', models.AutoField(primary_key=True, serialize=False)),
                ('base_configuration_key', models.CharField(blank=True, max_length=100, null=True)),
                ('base_configuration_name', models.CharField(blank=True, max_length=100, null=True)),
                ('base_configuration_value', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('base_configuration_image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('add_to_cache', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('frequently_used', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('for_app_version', models.IntegerField(default=0)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'base_configurations',
                'indexes': [models.Index(fields=['base_configuration_key'], name='base_config_base_co_9b6185_idx')],
            },
        ),
        migrations.CreateModel(
            name='ConnectorConfiguration',
            fields=[
                ('connector_id', models.AutoField(primary_key=True, serialize=False)),
                ('image_path', models.ImageField(blank=True, null=True, upload_to='images')),
                ('alternate_image_path', models.ImageField(blank=True, null=True, upload_to='images')),
                ('connector_plug_type', models.CharField(blank=True, max_length=30, null=True)),
                ('connector_plug_type_name', models.CharField(blank=True, max_length=30, null=True)),
                ('deleted', models.CharField(blank=True, max_length=30, null=True)),
                ('sorting_order', models.IntegerField(default=0)),
                ('for_app_version', models.IntegerField(default=0)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'connector_configuration',
                'indexes': [models.Index(condition=models.Q(('deleted', False)), fields=['connector_plug_type'], name='connectorsindexes')],
            },
        ),
        migrations.CreateModel(
            name='ElectricVehicleDatabase',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('vehicle_id', models.CharField(blank=True, max_length=70, null=True)),
                ('misc_body', models.CharField(blank=True, max_length=150, null=True)),
                ('vehicle_make', models.CharField(blank=True, max_length=150, null=True)),
                ('vehicle_model', models.CharField(blank=True, max_length=150, null=True)),
                ('vehicle_model_version', models.CharField(blank=True, max_length=150, null=True)),
                ('range_real', models.CharField(blank=True, max_length=150, null=True)),
                ('battery_capacity_useable', models.CharField(blank=True, max_length=150, null=True)),
                ('charge_plug', models.CharField(blank=True, max_length=150, null=True)),
                ('fastcharge_plug', models.CharField(blank=True, max_length=150, null=True)),
                ('fastcharge_chargespeed', models.CharField(blank=True, max_length=150, null=True)),
                ('max_charge_speed', models.CharField(blank=True, max_length=150, null=True)),
                ('ev_type', models.CharField(blank=True, choices=[('bev', 'bev'), ('phev', 'phev')], max_length=100, null=True)),
                ('ev_image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('ev_thumbnail_image', models.ImageField(blank=True, null=True, upload_to='images/thumbnail/')),
                ('electric_vehicle_object', models.TextField()),
            ],
            options={
                'indexes': [models.Index(fields=['vehicle_id'], name='electricvehicledatabaseindexes'), models.Index(fields=['ev_type'], name='electricvehicleevtypeindexes')],
            },
        ),
        migrations.CreateModel(
            name='EmailNotifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assign_to', models.CharField(blank=True, choices=[('All App Users', 'All App Users'), ('Only Subscribed Users', 'Only Subscribed Users')], max_length=60, null=True)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('template', models.CharField(blank=True, choices=[('Pre-release', 'Pre-release'), ('Post-release', 'Post-release'), ('Custom', 'Custom')], max_length=60, null=True)),
                ('scheduled_time', models.DateTimeField(blank=True, null=True)),
                ('delivered_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('Delivered', 'Delivered'), ('Scheduled', 'Scheduled')], max_length=60, null=True)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=10, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('email_preference', models.CharField(blank=True, max_length=60, null=True)),
                ('user_list', models.TextField(blank=True, null=True)),
                ('postcode', models.CharField(blank=True, max_length=100, null=True)),
                ('email_attachments', models.ManyToManyField(to='sharedServices.emailattachments')),
            ],
        ),
        migrations.CreateModel(
            name='LoginRecords',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=100)),
                ('device_mac_address', models.CharField(blank=True, max_length=100, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.adminuser')),
            ],
            options={
                'db_table': 'login_records',
            },
        ),
        migrations.CreateModel(
            name='LoyaltyOccurrences',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('loyalty_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loyalty_occurrences', related_query_name='loyalty_occurrences', to='sharedServices.loyalty')),
            ],
        ),
        migrations.CreateModel(
            name='LoyaltyProducts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('product_plu', models.CharField(blank=True, max_length=100, null=True)),
                ('product_bar_code', models.CharField(blank=True, max_length=100, null=True)),
                ('desc', models.CharField(blank=True, max_length=1000, null=True)),
                ('price', models.FloatField()),
                ('redeem_product_promotion_price', models.FloatField(default=0)),
                ('status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=60, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('loyalty_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loyalty_products', related_query_name='loyalty_products', to='sharedServices.loyalty')),
            ],
        ),
        migrations.CreateModel(
            name='MapMarkerConfigurations',
            fields=[
                ('map_marker_id', models.AutoField(primary_key=True, serialize=False)),
                ('map_marker_key', models.CharField(blank=True, max_length=100, null=True)),
                ('map_marker_image', models.ImageField(upload_to='images')),
                ('small_map_marker_image', models.ImageField(null=True, upload_to='images')),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'map_marker_configurations',
                'indexes': [models.Index(fields=['map_marker_key'], name='map_marker__map_mar_e4d876_idx')],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyBulkUpload',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('transaction_bulk_data', models.TextField()),
                ('transaction_data_size', models.IntegerField()),
                ('status', models.CharField(blank=True, choices=[('In progress', 'In progress'), ('Queued', 'Queued'), ('completed', 'completed'), ('Need review', 'Need review'), ('Failed', 'Failed')], default='Queued', max_length=100, null=True)),
                ('is_reconciled', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev')),
            ],
        ),
        migrations.CreateModel(
            name='ContactlessSessionsDownloadedReceipts',
            fields=[
                ('receipt_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_account_number', models.CharField(blank=True, max_length=100, null=True)),
                ('driivz_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payter_or_rh_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('session_cost', models.CharField(blank=True, max_length=100, null=True)),
                ('session_power_consumed', models.CharField(blank=True, max_length=100, null=True)),
                ('session_duration', models.CharField(blank=True, max_length=100, null=True)),
                ('receipt_data', models.TextField(blank=True, null=True)),
                ('downloaded_date', models.DateTimeField(blank=True, null=True)),
                ('session_date', models.DateTimeField(blank=True, null=True)),
                ('is_version_4_receipt', models.BooleanField(default=False)),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_charging_sessions_receipts', related_query_name='user_charging_sessions_receipts', to='sharedServices.mfguserev')),
            ],
            options={
                'db_table': 'contactless_downloaded_receipts',
            },
        ),
        migrations.CreateModel(
            name='ChargingSession',
            fields=[
                ('session_id', models.AutoField(primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('user_account_number', models.IntegerField(blank=True, null=True)),
                ('user_card_number', models.CharField(blank=True, max_length=500, null=True)),
                ('emp_session_id', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('charging_session_id', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('charging_authorization_status', models.CharField(blank=True, max_length=500, null=True)),
                ('session_status', models.CharField(blank=True, choices=[('start', 'start'), ('running', 'running'), ('rejected', 'rejected'), ('stopped', 'stopped'), ('closed', 'closed'), ('completed', 'completed')], max_length=100)),
                ('payment_id', models.CharField(max_length=1000, null=True)),
                ('paid_status', models.CharField(blank=True, choices=[('paid', 'paid'), ('unpaid', 'unpaid'), ('refunded', 'refunded')], default='unpaid', max_length=100)),
                ('payment_method', models.CharField(max_length=100, null=True)),
                ('payment_response', models.TextField(blank=True, null=True)),
                ('charging_data', models.TextField(blank=True, null=True)),
                ('user_mail', models.BinaryField(blank=True, max_length='max', null=True)),
                ('mail_status', models.CharField(blank=True, choices=[('pending', 'pending'), ('sent', 'sent')], default='pending', max_length=100)),
                ('total_cost', models.CharField(blank=True, max_length=100, null=True)),
                ('feedback', models.CharField(blank=True, max_length=500, null=True)),
                ('rating', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('back_office', models.CharField(blank=True, max_length=30, null=True)),
                ('is_reviewed', models.CharField(blank=True, choices=[('Admin', 'Admin'), ('App', 'App')], default='App', max_length=100, null=True)),
                ('is_force_stopped', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('is_refund_initiated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('payment_completed_at', models.DateTimeField(blank=True, null=True)),
                ('preauth_status', models.CharField(max_length=100, null=True)),
                ('preauth_collected_by', models.CharField(max_length=100, null=True)),
                ('session_tariff', models.CharField(blank=True, max_length=30, null=True)),
                ('payment_type', models.CharField(max_length=100, null=True)),
                ('deducted_voucher_amount', models.CharField(blank=True, max_length=20, null=True)),
                ('chargepoint_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='charging_sessions_chargepoints', related_query_name='charging_sessions_chargepoints', to='sharedServices.chargepoint')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_charging_sessions', related_query_name='user_charging_sessions', to='sharedServices.mfguserev')),
            ],
        ),
        migrations.CreateModel(
            name='Cards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.CharField(max_length=100, null=True)),
                ('customer_id', models.CharField(max_length=100, null=True)),
                ('cardholder_name', models.CharField(max_length=1000, null=True)),
                ('postal_code', models.CharField(max_length=100, null=True)),
                ('locality', models.CharField(max_length=1000, null=True)),
                ('country', models.CharField(max_length=100, null=True)),
                ('administrative_district_level_1', models.CharField(max_length=1000, null=True)),
                ('address_line_1', models.CharField(max_length=1000, null=True)),
                ('address_line_2', models.CharField(max_length=1000, null=True)),
                ('card_brand', models.CharField(max_length=1000, null=True, unique=True)),
                ('last_4', models.IntegerField()),
                ('exp_month', models.IntegerField()),
                ('exp_year', models.IntegerField()),
                ('card_id', models.CharField(max_length=100, null=True, unique=True)),
                ('card_type', models.CharField(max_length=100, null=True, unique=True)),
                ('version', models.IntegerField()),
                ('prepaid_type', models.CharField(max_length=100, null=True, unique=True)),
                ('enabled', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_cards', related_query_name='user_cards', to='sharedServices.mfguserev')),
            ],
        ),
        migrations.CreateModel(
            name='AppUserThirdPartyRegistrationFailedAPILogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, max_length=1000, null=True)),
                ('response', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('app_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='third_party_failed_api_log', related_query_name='third_party_failed_api_log', to='sharedServices.mfguserev')),
            ],
        ),
        migrations.CreateModel(
            name='OCPICredentials',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('endpoint', models.CharField(max_length=255)),
                ('token_a', models.CharField(blank=True, max_length=100, null=True)),
                ('cpo_token', models.CharField(blank=True, max_length=100, null=True)),
                ('emsp_token', models.CharField(blank=True, max_length=100, null=True)),
                ('created_date', models.DateTimeField()),
                ('updated_date', models.DateTimeField()),
                ('updated_by', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Initiated', 'Initiated'), ('Failed', 'Failed')], max_length=10)),
                ('from_role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ocpi_credentials_from_role', related_query_name='ocpi_credentials_from_role', to='sharedServices.ocpicredentialsrole')),
                ('to_role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ocpi_credentials_to_role', related_query_name='ocpi_credentials_to_role', to='sharedServices.ocpicredentialsrole')),
            ],
        ),
        migrations.CreateModel(
            name='OCPIEVSE',
            fields=[
                ('uid', models.CharField(max_length=36)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('evse_id', models.CharField(blank=True, max_length=48, null=True)),
                ('status', models.CharField(max_length=50)),
                ('status_schedule', models.JSONField(blank=True, null=True)),
                ('capabilities', models.JSONField(blank=True, null=True)),
                ('floor_level', models.CharField(blank=True, max_length=4, null=True)),
                ('coordinates', models.CharField(blank=True, max_length=255, null=True)),
                ('physical_reference', models.CharField(blank=True, max_length=16, null=True)),
                ('directions', models.JSONField(blank=True, null=True)),
                ('parking_restrictions', models.JSONField(blank=True, null=True)),
                ('images', models.JSONField(blank=True, null=True)),
                ('last_updated', models.DateTimeField()),
                ('chargepoint_mapping_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chargepoints', to='sharedServices.chargepoint')),
                ('location_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ocpi_locations', to='sharedServices.ocpilocation')),
            ],
        ),
        migrations.CreateModel(
            name='OCPIConnector',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('connector_id', models.CharField(max_length=36)),
                ('standard', models.CharField(max_length=50)),
                ('format', models.CharField(max_length=50)),
                ('power_type', models.CharField(max_length=50)),
                ('max_voltage', models.IntegerField()),
                ('max_amperage', models.IntegerField()),
                ('max_electric_power', models.IntegerField(blank=True, null=True)),
                ('tariff_ids', models.JSONField(blank=True, null=True)),
                ('terms_conditions', models.URLField(blank=True, max_length=255, null=True)),
                ('last_updated', models.DateTimeField()),
                ('evse_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ocpi_evses', to='sharedServices.ocpievse')),
            ],
        ),
        migrations.CreateModel(
            name='OCPIModuleDetails',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('identifier', models.CharField(max_length=100)),
                ('url', models.CharField(max_length=100)),
                ('role', models.CharField(max_length=50)),
                ('version', models.CharField(default='2.2.1', max_length=10)),
                ('credential_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credentials', to='sharedServices.ocpicredentials')),
            ],
        ),
        migrations.CreateModel(
            name='OCPISessions',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('session_id', models.CharField(blank=True, max_length=36, null=True)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField(blank=True, null=True)),
                ('kwh', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('auth_method', models.CharField(blank=True, choices=[('AUTH_REQUEST', 'AUTH_REQUEST'), ('COMMAND', 'COMMAND'), ('WHITELIST', 'WHITELIST')], max_length=20, null=True)),
                ('authorization_reference', models.CharField(blank=True, max_length=36, null=True)),
                ('cdr_token', models.TextField(blank=True, null=True)),
                ('meter_id', models.CharField(blank=True, max_length=255, null=True)),
                ('currency', models.CharField(blank=True, max_length=3, null=True)),
                ('total_cost_incl', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('total_cost_excl', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('status', models.CharField(blank=True, choices=[('ACTIVE', 'ACTIVE'), ('COMPLETED', 'COMPLETED'), ('INVALID', 'INVALID'), ('PENDING', 'PENDING'), ('RESERVATION', 'RESERVATION'), ('AWAITING', 'AWAITING')], max_length=20, null=True)),
                ('charging_periods', models.JSONField(blank=True, null=True)),
                ('user_account_number', models.CharField(blank=True, max_length=500, null=True)),
                ('user_card_number', models.CharField(blank=True, max_length=500, null=True)),
                ('emp_session_id', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('charging_session_id', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('charging_authorization_status', models.CharField(blank=True, max_length=500, null=True)),
                ('session_status', models.CharField(blank=True, choices=[('start', 'start'), ('running', 'running'), ('rejected', 'rejected'), ('stopped', 'stopped'), ('closed', 'closed'), ('completed', 'completed')], max_length=100)),
                ('payment_id', models.CharField(max_length=1000, null=True)),
                ('paid_status', models.CharField(blank=True, choices=[('paid', 'paid'), ('unpaid', 'unpaid'), ('refunded', 'refunded')], default='unpaid', max_length=100)),
                ('payment_method', models.CharField(max_length=100, null=True)),
                ('payment_response', models.TextField(blank=True, null=True)),
                ('charging_data', models.TextField(blank=True, null=True)),
                ('user_mail', models.BinaryField(blank=True, max_length='max', null=True)),
                ('mail_status', models.CharField(blank=True, choices=[('pending', 'pending'), ('sent', 'sent')], default='pending', max_length=100)),
                ('feedback', models.CharField(blank=True, max_length=500, null=True)),
                ('rating', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('back_office', models.CharField(blank=True, max_length=30, null=True)),
                ('is_reviewed', models.CharField(blank=True, choices=[('Admin', 'Admin'), ('App', 'App')], default='App', max_length=100, null=True)),
                ('is_force_stopped', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('is_refund_initiated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('payment_completed_at', models.DateTimeField(blank=True, null=True)),
                ('preauth_status', models.CharField(max_length=100, null=True)),
                ('preauth_collected_by', models.CharField(max_length=100, null=True)),
                ('session_tariff', models.CharField(blank=True, max_length=30, null=True)),
                ('payment_type', models.CharField(max_length=100, null=True)),
                ('deducted_voucher_amount', models.CharField(blank=True, max_length=20, null=True)),
                ('country_code', models.CharField(max_length=2)),
                ('party_id', models.CharField(max_length=3)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('vat_percentage', models.DecimalField(decimal_places=4, default=20, max_digits=12)),
                ('is_cdr_valid', models.BooleanField(null=True)),
                ('cdr_id', models.CharField(blank=True, max_length=100, null=True)),
                ('chargepoint_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ocpi_charging_sessions_chargepoints', related_query_name='ocpi_charging_sessions_chargepoints', to='sharedServices.chargepoint')),
                ('connector_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sharedServices.ocpiconnector')),
                ('evse_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.ocpievse')),
                ('location_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='sharedServices.ocpilocation')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ocpi_user_charging_sessions', related_query_name='ocpi_user_charging_sessions', to='sharedServices.mfguserev')),
            ],
            options={
                'db_table': 'sharedServices_ocpisessions',
            },
        ),
        migrations.CreateModel(
            name='OCPICommands',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('command', models.CharField(choices=[('UNLOCK_CONNECTOR', 'UNLOCK_CONNECTOR'), ('RESERVE_NOW', 'RESERVE_NOW'), ('START_SESSION', 'START_SESSION'), ('STOP_SESSION', 'STOP_SESSION'), ('CANCEL_RESERVATION', 'CANCEL_RESERVATION')], max_length=50)),
                ('request_payload', models.JSONField(blank=True, null=True)),
                ('response_payload', models.JSONField(blank=True, null=True)),
                ('command_exec_payload', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('session_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.ocpisessions')),
            ],
        ),
        migrations.CreateModel(
            name='OCPIChargeDetailRecords',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('party_id', models.CharField(max_length=3)),
                ('country_code', models.CharField(max_length=2)),
                ('cdr_id', models.CharField(max_length=39)),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField()),
                ('session_id', models.CharField(blank=True, max_length=36, null=True)),
                ('cdr_token', models.TextField()),
                ('auth_method', models.CharField(choices=[('AUTH_REQUEST', 'AUTH_REQUEST'), ('COMMAND', 'COMMAND'), ('WHITELIST', 'WHITELIST')], max_length=20)),
                ('authorization_reference', models.CharField(blank=True, max_length=36, null=True)),
                ('cdr_location', models.TextField()),
                ('meter_id', models.CharField(blank=True, max_length=255, null=True)),
                ('currency', models.CharField(max_length=3)),
                ('tariffs', models.TextField(blank=True, null=True)),
                ('charging_periods', models.TextField()),
                ('signed_data', models.JSONField(blank=True, null=True)),
                ('total_cost', models.TextField()),
                ('total_fixed_cost', models.TextField(blank=True, null=True)),
                ('total_energy', models.DecimalField(decimal_places=4, max_digits=12)),
                ('total_energy_cost', models.TextField(blank=True, null=True)),
                ('total_time', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('total_time_cost', models.JSONField(blank=True, null=True)),
                ('total_parking_time', models.DecimalField(blank=True, decimal_places=4, max_digits=12, null=True)),
                ('total_parking_cost', models.TextField(blank=True, null=True)),
                ('total_reservation_cost', models.TextField(blank=True, null=True)),
                ('remark', models.CharField(blank=True, max_length=255, null=True)),
                ('invoice_reference_id', models.CharField(blank=True, max_length=39, null=True)),
                ('credit', models.BooleanField(blank=True, null=True)),
                ('credit_reference_id', models.CharField(blank=True, max_length=39, null=True)),
                ('home_charging_compensation', models.BooleanField(blank=True, null=True)),
                ('last_updated', models.DateTimeField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('charging_session_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cdr_session', related_query_name='cdr_session', to='sharedServices.ocpisessions')),
            ],
        ),
        migrations.CreateModel(
            name='OCPITokens',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.CharField(max_length=36)),
                ('country_code', models.CharField(max_length=2)),
                ('party_id', models.CharField(max_length=3)),
                ('type', models.CharField(choices=[('AD_HOC_USER', 'AD_HOC_USER'), ('APP_USER', 'APP_USER'), ('RFID', 'RFID'), ('OTHER', 'OTHER')], max_length=20)),
                ('contract_id', models.CharField(max_length=36)),
                ('visual_number', models.CharField(blank=True, max_length=64, null=True)),
                ('issuer', models.CharField(max_length=64)),
                ('valid', models.BooleanField(default=True)),
                ('whitelist', models.CharField(choices=[('ALWAYS', 'ALWAYS'), ('ALLOWED', 'ALLOWED'), ('ALLOWED_OFFLINE', 'ALLOWED_OFFLINE'), ('NEVER', 'NEVER')], max_length=20)),
                ('language', models.CharField(blank=True, max_length=2, null=True)),
                ('default_profile_type', models.CharField(blank=True, max_length=20, null=True)),
                ('energy_contract', models.JSONField(null=True)),
                ('last_updated', models.DateTimeField()),
                ('group_id', models.CharField(max_length=36, null=True)),
                ('back_offices', models.JSONField(blank=True, null=True)),
                ('is_verified', models.BooleanField(blank=True, null=True)),
                ('user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user', to='sharedServices.mfguserev')),
            ],
        ),
        migrations.CreateModel(
            name='PaidPaymentLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(max_length=1000, null=True)),
                ('paid_due_amount', models.CharField(max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('charging_session', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.chargingsession')),
                ('charging_session_ocpi', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.ocpisessions')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='images')),
                ('swarco_token', models.CharField(blank=True, max_length=1000, null=True)),
                ('swarco_refresh_token', models.CharField(blank=True, max_length=1000, null=True)),
                ('driivz_account_number', models.CharField(blank=True, max_length=100, null=True)),
                ('driivz_virtual_card_id', models.CharField(blank=True, max_length=100, null=True)),
                ('driivz_virtual_card_number', models.CharField(blank=True, max_length=100, null=True)),
                ('user_gift_card_id', models.CharField(blank=True, max_length=100, null=True)),
                ('user_gift_card_gan', models.CharField(blank=True, max_length=100, null=True)),
                ('default_payment_method', models.CharField(blank=True, max_length=1000, null=True)),
                ('app_access_token', models.CharField(blank=True, max_length=1000, null=True)),
                ('user_token', models.CharField(blank=True, max_length=1000, null=True)),
                ('user_ev_ids', models.CharField(blank=True, max_length=3000, null=True)),
                ('default_ev_id', models.CharField(blank=True, max_length=100, null=True)),
                ('have_amount_due', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('due_amount_data', models.TextField(blank=True, null=True)),
                ('two_factor_done', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('wallet_balance', models.CharField(blank=True, max_length=100, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('fcm_device_token', models.CharField(blank=True, max_length=1000, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('inapp_notification_object', models.TextField(blank=True, null=True)),
                ('promotion_preference_status', models.BooleanField(default=True)),
                ('loyalty_preference_status', models.BooleanField(default=True)),
                ('other_preference_status', models.BooleanField(default=True)),
                ('email_news_letter_preference_status', models.BooleanField(default=True)),
                ('email_marketing_update_preference_status', models.BooleanField(default=True)),
                ('email_promotion_preference_status', models.BooleanField(default=True)),
                ('user_domain', models.CharField(default='normal_user', max_length=100)),
                ('email_ev_updates_preference_status', models.BooleanField(default=True)),
                ('user_specific_3ds_set_by_admin', models.BooleanField(default=False, null=True)),
                ('user_specific_3ds_configurations', models.TextField(null=True)),
                ('user_specific_3ds_configurations_updated_at', models.DateTimeField(null=True)),
                ('is_3ds_check_active', models.BooleanField(default=False, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', related_query_name='user_profile', to='sharedServices.mfguserev')),
            ],
        ),
        migrations.CreateModel(
            name='Promotions',
            fields=[
                ('promotion_id', models.AutoField(primary_key=True, serialize=False)),
                ('unique_code', models.CharField(blank=True, max_length=200, null=True)),
                ('retail_barcode', models.CharField(blank=True, max_length=200, null=True)),
                ('product', models.CharField(blank=True, max_length=200, null=True)),
                ('promotion_title', models.CharField(blank=True, max_length=200, null=True)),
                ('m_code', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=100)),
                ('available_for', models.CharField(blank=True, choices=[('App Only', 'App Only'), ('Generic', 'Generic'), ('All', 'All')], max_length=100)),
                ('offer_type', models.CharField(blank=True, max_length=200, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('price', models.FloatField(default=0)),
                ('quantity', models.IntegerField(default=0)),
                ('londis_code', models.CharField(blank=True, max_length=200, null=True)),
                ('budgen_code', models.CharField(blank=True, max_length=200, null=True)),
                ('shop_ids', models.CharField(blank=True, max_length=1000, null=True)),
                ('offer_details', models.CharField(blank=True, max_length=500, null=True)),
                ('terms_and_conditions', models.CharField(blank=True, max_length=500, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'indexes': [models.Index(condition=models.Q(('status', 'Active')), fields=['-start_date'], name='promotionsindexes')],
            },
        ),
        migrations.CreateModel(
            name='PromotionImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_path', models.ImageField(blank=True, null=True, upload_to='images')),
                ('image_width', models.IntegerField(default=0)),
                ('image_height', models.IntegerField(default=0)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('promotion_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.promotions')),
            ],
            options={
                'db_table': 'promotion_images',
            },
        ),
        migrations.AddField(
            model_name='loyalty',
            name='reward_expiration_notification_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reward_expiration_notifications', related_query_name='reward_expiration_notifications', to='sharedServices.pushnotifications'),
        ),
        migrations.AddField(
            model_name='loyalty',
            name='reward_unlocked_notification_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reward_unlocked_notifications', related_query_name='reward_unlocked_notifications', to='sharedServices.pushnotifications'),
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('review_id', models.AutoField(primary_key=True, serialize=False)),
                ('review', models.CharField(blank=True, max_length=200, null=True)),
                ('status', models.CharField(blank=True, default='pending', max_length=100, null=True)),
                ('flag', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('post_date', models.DateTimeField(blank=True, max_length=100)),
                ('img_url', models.ImageField(blank=True, null=True, upload_to='images')),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('update_by', models.CharField(blank=True, max_length=100, null=True)),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewLikes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_response', models.CharField(blank=True, choices=[('like', 'like'), ('disLike', 'disLike')], max_length=100)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('update_date', models.DateTimeField(blank=True, null=True)),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev')),
                ('review_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_response', related_query_name='review_response', to='sharedServices.reviews')),
            ],
            options={
                'db_table': 'review_likes',
            },
        ),
        migrations.CreateModel(
            name='RoleAccessTypes',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('role_name', models.CharField(blank=True, max_length=20, null=True)),
                ('access_content', models.ManyToManyField(to='sharedServices.content')),
            ],
            options={
                'db_table': 'role_access_Types',
            },
        ),
        migrations.AddField(
            model_name='adminuser',
            name='role_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.roleaccesstypes'),
        ),
        migrations.CreateModel(
            name='ServiceConfiguration',
            fields=[
                ('service_id', models.AutoField(primary_key=True, serialize=False)),
                ('service_name', models.CharField(blank=True, max_length=100, null=True)),
                ('image_path', models.ImageField(blank=True, null=True, upload_to='images')),
                ('image_path_with_text', models.ImageField(blank=True, null=True, upload_to='images')),
                ('service_type', models.CharField(blank=True, max_length=30, null=True)),
                ('service_unique_identifier', models.IntegerField(default=0)),
                ('deleted', models.CharField(blank=True, max_length=30, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'service_configuration',
                'indexes': [models.Index(condition=models.Q(('deleted', False)), fields=['service_type', 'service_name'], name='servicesindexes')],
            },
        ),
        migrations.CreateModel(
            name='SessionTransactionStatusTracker',
            fields=[
                ('transaction_id', models.AutoField(primary_key=True, serialize=False)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
                ('status', models.CharField(blank=True, choices=[('Successful', 'Successful'), ('Failed', 'Failed')], default='Successful', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.adminuser')),
            ],
        ),
        migrations.CreateModel(
            name='StationConnector',
            fields=[
                ('station_connector_id', models.AutoField(primary_key=True, serialize=False)),
                ('connector_id', models.CharField(default='', max_length=15, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('connector_name', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('connector_type', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('connector_sorting_order', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('status', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('current_status', models.CharField(default='Not available', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('plug_type_name', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('max_charge_rate', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('tariff_amount', models.FloatField(default=0, validators=[django.core.validators.MaxValueValidator(999), django.core.validators.MinValueValidator(0)])),
                ('tariff_ids', models.CharField(blank=True, max_length=1000, null=True)),
                ('tariff_currency', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('back_office', models.CharField(blank=True, max_length=100, null=True)),
                ('connector_evse_uid', models.CharField(blank=True, max_length=36, null=True)),
                ('charge_point_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='connectors_list', related_query_name='connectors_list', to='sharedServices.chargepoint')),
            ],
            options={
                'db_table': 'station_connector',
            },
        ),
        migrations.AddField(
            model_name='ocpisessions',
            name='station_connector_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ocpi_charging_sessions_connectors', related_query_name='ocpi_charging_sessions_connectors', to='sharedServices.stationconnector'),
        ),
        migrations.AddField(
            model_name='ocpiconnector',
            name='connector_mapping_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='station_connectors', related_query_name='station_connectors', to='sharedServices.stationconnector'),
        ),
        migrations.AddField(
            model_name='chargingsession',
            name='connector_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='charging_sessions_connectors', related_query_name='charging_sessions_connectors', to='sharedServices.stationconnector'),
        ),
        migrations.CreateModel(
            name='Stations',
            fields=[
                ('station_dbid', models.AutoField(primary_key=True, serialize=False)),
                ('station_id', models.CharField(default='', max_length=15, unique=True, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('station_name', models.CharField(default='', max_length=200, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('station_address1', models.CharField(default='', max_length=500, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('station_address2', models.CharField(default='', max_length=500, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('station_address3', models.CharField(default='', max_length=500, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('town', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('post_code', models.CharField(default='', max_length=50, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('country', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('brand', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('owner', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('latitude', models.FloatField(default=0)),
                ('longitude', models.FloatField(default=0)),
                ('email', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('phone', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('status', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('station_type', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('site_title', models.CharField(default='', max_length=120, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('driivz_display_name', models.CharField(blank=True, max_length=120, null=True)),
                ('operation_region', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('region', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('regional_manager', models.CharField(default='', max_length=120, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('area', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('area_regional_manager', models.CharField(default='', max_length=120, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('is_mfg', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('is_ev', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('available_promotion', models.TextField(default='[]')),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('site_id', models.CharField(blank=True, max_length=30, null=True)),
                ('valeting', models.CharField(blank=True, default='No', max_length=30, null=True)),
                ('payment_terminal', models.CharField(blank=True, max_length=120, null=True)),
                ('receipt_hero_site_name', models.CharField(blank=True, max_length=100, null=True)),
                ('ev_station_status', models.CharField(blank=True, max_length=100, null=True)),
                ('overstay_fee', models.FloatField(default=0, null=True)),
                ('parking_details', models.CharField(blank=True, max_length=1000, null=True)),
                ('valeting_site_id', models.CharField(blank=True, max_length=30, null=True)),
                ('ocpi_locations', models.JSONField(blank=True, null=True)),
                ('ampeco_site_id', models.CharField(blank=True, max_length=30, null=True)),
                ('ampeco_site_title', models.CharField(blank=True, max_length=100, null=True)),
                ('ocpi_location_id', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'indexes': [models.Index(condition=models.Q(('status', 'Active')), fields=['latitude', 'longitude'], name='stationsindex')],
            },
        ),
        migrations.CreateModel(
            name='StationImages',
            fields=[
                ('image_id', models.AutoField(primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='images')),
                ('image_width', models.IntegerField(default=0)),
                ('image_height', models.IntegerField(default=0)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('station_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='image_url_list', related_query_name='image_url_list', to='sharedServices.stations')),
            ],
            options={
                'db_table': 'station_images',
            },
        ),
        migrations.AddField(
            model_name='stationconnector',
            name='station_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_connectors', related_query_name='station_connectors', to='sharedServices.stations'),
        ),
        migrations.AddField(
            model_name='reviews',
            name='station_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_reviews', related_query_name='station_reviews', to='sharedServices.stations'),
        ),
        migrations.CreateModel(
            name='PromotionsAvailableOn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('station_name', models.CharField(blank=True, max_length=200, null=True)),
                ('operation_region', models.CharField(blank=True, max_length=100, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('area', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('promotion_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_available_promotions', related_query_name='station_available_promotions', to='sharedServices.promotions')),
                ('station_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_promotions', related_query_name='station_promotions', to='sharedServices.stations')),
            ],
            options={
                'db_table': 'promotions_available_on',
            },
        ),
        migrations.AddField(
            model_name='ocpisessions',
            name='station_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ocpi_station_charging_sessions', related_query_name='ocpi_station_charging_sessions', to='sharedServices.stations'),
        ),
        migrations.AddField(
            model_name='ocpilocation',
            name='station_mapping_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stations', to='sharedServices.stations'),
        ),
        migrations.CreateModel(
            name='LoyaltyTransactions',
            fields=[
                ('loyalty_transaction_id', models.AutoField(primary_key=True, serialize=False)),
                ('qr_code', models.CharField(blank=True, max_length=1000, null=True)),
                ('transaction_response', models.TextField(blank=True, null=True)),
                ('transaction_time', models.DateTimeField(blank=True, null=True)),
                ('transaction_type', models.CharField(blank=True, choices=[('Purchased', 'Purchased'), ('Redeemed', 'Redeemed')], max_length=60, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('count_of_transactions', models.IntegerField(default=1)),
                ('loyalty_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loyalty_transactions', related_query_name='loyalty_transactions', to='sharedServices.loyalty')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_loyalties', related_query_name='user_loyalties', to='sharedServices.mfguserev')),
                ('station_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_loyalty_transacions', related_query_name='station_loyalties_transactions', to='sharedServices.stations')),
            ],
        ),
        migrations.CreateModel(
            name='LoyaltyAvailableOn',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('station_name', models.CharField(blank=True, max_length=200, null=True)),
                ('operation_region', models.CharField(blank=True, max_length=100, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('area', models.CharField(blank=True, max_length=100, null=True)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True)),
                ('loyalty_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_available_loyalties', related_query_name='station_available_loyalties', to='sharedServices.loyalty')),
                ('station_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_loyalties', related_query_name='station_loyalties', to='sharedServices.stations')),
            ],
            options={
                'db_table': 'loyalties_available_on',
            },
        ),
        migrations.AddField(
            model_name='chargingsession',
            name='station_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='station_charging_sessions', related_query_name='station_charging_sessions', to='sharedServices.stations'),
        ),
        migrations.AddField(
            model_name='chargepoint',
            name='station_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='charge_points', related_query_name='charge_points', to='sharedServices.stations'),
        ),
        migrations.CreateModel(
            name='Bookmarks',
            fields=[
                ('bookmark_id', models.AutoField(primary_key=True, serialize=False)),
                ('bookmark_status', models.CharField(blank=True, choices=[('bookmarked', 'bookmarked'), ('bookmarked-removed', 'bookmarked-removed')], max_length=100)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev')),
                ('bookmarked_station_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_bookmarks', related_query_name='user_bookmarks', to='sharedServices.stations')),
            ],
        ),
        migrations.CreateModel(
            name='StationServices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('start_time', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('end_time', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('availability_days', models.CharField(choices=[('monday', 'monday'), ('tuesday', 'tuesday'), ('wednesday', 'wednesday'), ('thursday', 'thursday'), ('friday', 'friday'), ('saturday', 'saturday'), ('sunday', 'sunday')], max_length=100)),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('service_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.serviceconfiguration')),
                ('station_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services_list', related_query_name='services_list', to='sharedServices.stations')),
            ],
            options={
                'db_table': 'station_services',
            },
        ),
        migrations.CreateModel(
            name='StationWorkingHours',
            fields=[
                ('station_working_hours_id', models.AutoField(primary_key=True, serialize=False)),
                ('monday_friday', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('saturday', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('sunday', models.CharField(default='', max_length=30, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('deleted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=100, null=True)),
                ('created_date', models.DateTimeField(blank=True, null=True)),
                ('updated_date', models.DateTimeField(blank=True, null=True)),
                ('updated_by', models.CharField(default='', max_length=100, validators=[sharedServices.model_files.station_models.validate_min_length])),
                ('station_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='working_hours_details', related_query_name='working_hours_details', to='sharedServices.stations')),
            ],
            options={
                'db_table': 'station_working_hours',
            },
        ),
        migrations.CreateModel(
            name='TariffComponents',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('ENERGY', 'ENERGY'), ('FLAT', 'FLAT'), ('PARKING_TIME', 'PARKING_TIME'), ('TIME', 'TIME')], max_length=20, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('vat', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('step_size', models.IntegerField(blank=True, null=True)),
                ('element_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tariff_component', related_query_name='tariff_component', to='sharedServices.tariffelements')),
            ],
        ),
        migrations.CreateModel(
            name='TariffRestrictions',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('start_time', models.CharField(blank=True, max_length=5, null=True)),
                ('end_time', models.CharField(blank=True, max_length=5, null=True)),
                ('start_date', models.CharField(blank=True, max_length=10, null=True)),
                ('end_date', models.CharField(blank=True, max_length=10, null=True)),
                ('min_kwh', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('max_kwh', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('min_current', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('max_current', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('min_power', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('max_power', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('min_duration', models.IntegerField(blank=True, null=True)),
                ('max_duration', models.IntegerField(blank=True, null=True)),
                ('reservation', models.BooleanField(blank=True, null=True)),
                ('reservation_expiry', models.BooleanField(blank=True, null=True)),
                ('day_of_week', models.CharField(blank=True, max_length=100, null=True)),
                ('element_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tariff_restriction', related_query_name='tariff_restriction', to='sharedServices.tariffelements')),
            ],
        ),
        migrations.AddConstraint(
            model_name='tariffs',
            constraint=models.UniqueConstraint(fields=('country_code', 'party_id', 'tariff_id'), name='unique_tariff_id_party_id_country_code'),
        ),
        migrations.AddField(
            model_name='tariffelements',
            name='tariff_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tariff_element', related_query_name='tariff_element', to='sharedServices.tariffs'),
        ),
        migrations.AddField(
            model_name='thirdpartycredentials',
            name='user_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev'),
        ),
        migrations.AddField(
            model_name='threedschecklogs',
            name='ocpi_session_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_3ds_check_logs_ocpi', related_query_name='user_3ds_check_logs_ocpi', to='sharedServices.ocpisessions'),
        ),
        migrations.AddField(
            model_name='threedschecklogs',
            name='session_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_3ds_check_logs', related_query_name='user_3ds_check_logs', to='sharedServices.chargingsession'),
        ),
        migrations.AddField(
            model_name='threedstriggerlogs',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_3ds_trigger_logs', related_query_name='user_3ds_trigger_logs', to='sharedServices.mfguserev'),
        ),
        migrations.AddField(
            model_name='threedschecklogs',
            name='three_ds_trigger_log_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sharedServices.threedstriggerlogs'),
        ),
        migrations.AddField(
            model_name='transactions',
            name='station_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.stations'),
        ),
        migrations.AddField(
            model_name='transactionsdetails',
            name='card_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.profile'),
        ),
        migrations.AddField(
            model_name='transactionsdetails',
            name='station_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.stations'),
        ),
        migrations.AddField(
            model_name='transactionstracker',
            name='assigned_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.adminuser'),
        ),
        migrations.AddField(
            model_name='transactionstracker',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.mfguserev'),
        ),
        migrations.AddField(
            model_name='trips',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_trips', related_query_name='user_trips', to='sharedServices.mfguserev'),
        ),
        migrations.AddField(
            model_name='userevs',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ev_users', related_query_name='ev_users', to='sharedServices.mfguserev'),
        ),
        migrations.AddField(
            model_name='userevs',
            name='vehicle_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_evs', related_query_name='user_evs', to='sharedServices.electricvehicledatabase'),
        ),
        migrations.AddField(
            model_name='userloyaltytransactions',
            name='loyalty_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_loyalty_transactions', related_query_name='user_loyalty_transactions', to='sharedServices.loyalty'),
        ),
        migrations.AddField(
            model_name='userloyaltytransactions',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_wise_loyalties', related_query_name='user_wise_loyalties', to='sharedServices.mfguserev'),
        ),
        migrations.AddField(
            model_name='userselectedstationfinderfilters',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_selected_station_finder_filters', related_query_name='user_selected_station_finder_filters', to='sharedServices.mfguserev'),
        ),
        migrations.AddField(
            model_name='valetingmachine',
            name='station_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.stations'),
        ),
        migrations.AddField(
            model_name='valetingterminals',
            name='station_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sharedServices.stations'),
        ),
        migrations.AddIndex(
            model_name='valetingtransactiondata',
            index=models.Index(fields=['transaction_id', 'card_number'], name='valeting_tr_transac_ac3c3b_idx'),
        ),
        migrations.AddConstraint(
            model_name='ocpievse',
            constraint=models.UniqueConstraint(fields=('location_id', 'uid'), name='unique_location_id_uid'),
        ),
        migrations.AddConstraint(
            model_name='ocpichargedetailrecords',
            constraint=models.UniqueConstraint(fields=('cdr_id', 'country_code', 'party_id'), name='unique_cdr_id_country_code_party_id'),
        ),
        migrations.AddConstraint(
            model_name='ocpitokens',
            constraint=models.UniqueConstraint(fields=('uid', 'type'), name='unique_uid_type'),
        ),
        migrations.AddIndex(
            model_name='loyalty',
            index=models.Index(condition=models.Q(('status', 'Active')), fields=['-valid_from_date'], name='loyaltyindexes'),
        ),
        migrations.AddConstraint(
            model_name='ocpiconnector',
            constraint=models.UniqueConstraint(fields=('evse_id', 'connector_id'), name='unique_evse_id_connector_id'),
        ),
        migrations.AddIndex(
            model_name='stationimages',
            index=models.Index(condition=models.Q(('deleted', False)), fields=['station_id'], name='stationimagesindexes'),
        ),
        migrations.AddIndex(
            model_name='stationconnector',
            index=models.Index(condition=models.Q(('status', 'Active')), fields=['station_id', 'charge_point_id'], name='stationconnectorindexes'),
        ),
        migrations.AddIndex(
            model_name='promotionsavailableon',
            index=models.Index(condition=models.Q(('deleted', False)), fields=['station_id', 'promotion_id'], name='promotionstationsindexes'),
        ),
        migrations.AddIndex(
            model_name='ocpisessions',
            index=models.Index(fields=['emp_session_id'], name='ocpisessionidindexes'),
        ),
        migrations.AddIndex(
            model_name='ocpisessions',
            index=models.Index(fields=['end_time'], name='ocpiosessionendtimeindexes'),
        ),
        migrations.AddConstraint(
            model_name='ocpilocation',
            constraint=models.UniqueConstraint(fields=('country_code', 'party_id', 'location_id'), name='unique_location_id_party_id_country_code'),
        ),
        migrations.AddIndex(
            model_name='loyaltyavailableon',
            index=models.Index(condition=models.Q(('deleted', 'No')), fields=['station_id', 'loyalty_id'], name='loyaltystationsindexes'),
        ),
        migrations.AddIndex(
            model_name='chargingsession',
            index=models.Index(fields=['emp_session_id'], name='chargingsessionidindexes'),
        ),
        migrations.AddIndex(
            model_name='chargingsession',
            index=models.Index(fields=['end_time'], name='chargingsessionendtimeindexes'),
        ),
        migrations.AddIndex(
            model_name='chargepoint',
            index=models.Index(condition=models.Q(('charger_point_status', 'Active')), fields=['station_id'], name='chargepointindexes'),
        ),
        migrations.AddIndex(
            model_name='stationservices',
            index=models.Index(condition=models.Q(('deleted', False)), fields=['station_id', 'service_name', 'service_id'], name='stationservicesindexes'),
        ),
        migrations.AddConstraint(
            model_name='tariffcomponents',
            constraint=models.UniqueConstraint(fields=('element_id', 'type'), name='unique_type_element_id'),
        ),
        migrations.AddConstraint(
            model_name='tariffrestrictions',
            constraint=models.UniqueConstraint(fields=('element_id', 'day_of_week'), name='unique_day_of_week_element_id'),
        ),
    ]
