"""
Django settings for ev_chargingapp_backend project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
import sentry_sdk
from pathlib import Path
# importing environ library
from datetime import timedelta
from decouple import config

# from azure.monitor.opentelemetry import configure_azure_monitor
from sentry_sdk.integrations.django import DjangoIntegration

# Configure OpenTelemetry to use Azure Monitor with the specified connection string
# configure_azure_monitor(
#     connection_string=(
#         f"InstrumentationKey={config('DJANGO_AZURE_INSIGHTS_INSTRUMENTATION_KEY')};"+
#         "IngestionEndpoint=https://ukwest-0.in.applicationinsights.azure.com/;"+
#         "LiveEndpoint=https://ukwest.livediagnostics.monitor.azure.com/"
#     )
# )


import traceback

try:
    print("Trying to configure Azure Monitor instrumentation...")
    from azure.monitor.opentelemetry import configure_azure_monitor
    configure_azure_monitor(
    connection_string=(
        f"InstrumentationKey={config('DJANGO_AZURE_INSIGHTS_INSTRUMENTATION_KEY')};"
        + "IngestionEndpoint=https://ukwest-0.in.applicationinsights.azure.com/;"
        + "LiveEndpoint=https://ukwest.livediagnostics.monitor.azure.com/"
    )
)
    print("Azure Monitor instrumentation configured successfully.")
except Exception as e:
    print("Failed to configure Azure Monitor instrumentation.")
    print("Error:", e)
    print("Full traceback:")
    traceback.print_exc()


APPLICATION_INSIGHTS = {
    'ikey': config('DJANGO_AZURE_INSIGHTS_INSTRUMENTATION_KEY'),
}

# Initialise environment variables
# Building paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

sentry_sdk.init(
    dsn=config("DJANGO_SENTRY_DSN_KEY"),
    # ...
    integrations=[
        DjangoIntegration(
            transaction_style="url",
            middleware_spans=True,
            signals_spans=False,
            cache_spans=False,
        ),
    ],
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_APP_SECRET_KEY")
DJANGO_APP_AZURE_FUNCTION_CRON_JOB_SECRET = config("DJANGO_APP_AZURE_FUNCTION_CRON_JOB_SECRET")

# pylint:enable=line-too-long

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "backendServices.promotions",
    "backendServices.auths",
    "backendServices.stations",
    "backendServices.trip_planner",
    "backendServices.charging_sessions",
    "backendServices.electric_vehicles",
    "backendServices.history",
    "backendServices.loyalty",
    "backendServices.notifications",
    "backendServices.contactless",
    "rest_framework",
    "rest_framework_swagger",
    "sharedServices",
    "storages",
    "corsheaders",
    'drf_yasg',
]

MIDDLEWARE = [
    "applicationinsights.django.middleware.ApplicationInsightsMiddleware",
    "sharedServices.middleware.OpenTelemetryMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "backendServices.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backendServices.wsgi.application"

DATA_UPLOAD_MAX_NUMBER_FIELDS = 5040
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config("DJANGO_APP_ENGINE"),
        "HOST": config("DJANGO_APP_HOST"),
        "PORT": config("DJANGO_APP_PORT"),
        "NAME": config("DJANGO_APP_NAME"),
        "USER": config("DJANGO_APP_USER"),
        "PASSWORD": config("DJANGO_APP_PASSWORD"),
        "OPTIONS": {
            "driver": config("DJANGO_APP_DRIVER"),
            "unicode_results": True,
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation\
            .UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.\
            .MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation\
            .CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation\
            .NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/London"

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEFAULT_FILE_STORAGE = "sharedServices.create_azure.AzureMediaStorage"
STATICFILES_STORAGE = "sharedServices.create_azure.AzureStaticStorage"

STATIC_LOCATION = "static"
MEDIA_LOCATION = "media"

AZURE_ACCOUNT_NAME = config("DJANGO_APP_AZURE_APP_NAME")
AZURE_CUSTOM_DOMAIN = f"{AZURE_ACCOUNT_NAME}.blob.core.windows.net"
STATIC_URL = f"https://{AZURE_CUSTOM_DOMAIN}/{STATIC_LOCATION}/"
MEDIA_URL = f"https://{AZURE_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/"
STATIC_ROOT = STATIC_URL
MEDIA_ROOT = MEDIA_URL
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "sharedServices.MFGUserEV"
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "sharedServices.backends.CustomerBackend",
]

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
}

CACHE_TTL = 60 * 60
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "rediss://"
        + config("DJANGO_APP_AZURE_REDIS_HOST")
        + ":"
        + config("DJANGO_APP_AZURE_REDIS_PORT")
        + "/",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": config("DJANGO_APP_AZURE_REDIS_PASSWORD"),
        },
        "KEY_PREFIX": "api",
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=365),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=365),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(days=365),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=365),
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        'verbose': {
            'format': '{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        "simple": {
            "format": "%(asctime)s | %(levelname)s | %(message)s",
        },
    },
    "handlers": {
        "stdout": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        'django': {
            'handlers': [
                'stdout'
            ],
        },
    }
}

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
]

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False
}
